apiVersion: v1
items:
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    creationTimestamp: 2018-04-07T12:29:24Z
    generation: 1
    labels:
      k8s-app: filebeat-dynamic
      kubernetes.io/cluster-service: "true"
    name: filebeat-dynamic
    namespace: kube-system
    resourceVersion: "105969"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/daemonsets/filebeat-dynamic
    uid: 4e207a1d-3a5f-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: filebeat-dynamic
        kubernetes.io/cluster-service: "true"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: filebeat-dynamic
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/filebeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/filebeat:6.2.3
          imagePullPolicy: Always
          name: filebeat-dynamic
          resources: {}
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/filebeat.yml
            name: config
            readOnly: true
            subPath: filebeat.yml
          - mountPath: /usr/share/filebeat/data
            name: data
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          - mountPath: /var/run/docker.sock
            name: dockersock
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: filebeat-dynamic
        serviceAccountName: filebeat-dynamic
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: filebeat-dynamic-config
          name: config
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: varlibdockercontainers
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: dockersock
        - emptyDir: {}
          name: data
    templateGeneration: 1
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"fluentd-gcp","kubernetes.io/cluster-service":"true","version":"v2.0.10"},"name":"fluentd-gcp-v2.0.10","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"fluentd-gcp","kubernetes.io/cluster-service":"true","version":"v2.0.10"}},"spec":{"containers":[{"env":[{"name":"FLUENTD_ARGS","value":"--no-supervisor -q"}],"image":"gcr.io/google-containers/fluentd-gcp:2.0.10","livenessProbe":{"exec":{"command":["/bin/sh","-c","LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then\n  exit 1;\nfi; LAST_MODIFIED_DATE=`stat /var/log/fluentd-buffers | grep Modify | sed -r \"s/Modify: (.*)/\\1/\"`; LAST_MODIFIED_TIMESTAMP=`date -d \"$LAST_MODIFIED_DATE\" +%s`; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $STUCK_THRESHOLD_SECONDS` ]; then\n  rm -rf /var/log/fluentd-buffers;\n  exit 1;\nfi; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $LIVENESS_THRESHOLD_SECONDS` ]; then\n  exit 1;\nfi;\n"]},"initialDelaySeconds":600,"periodSeconds":60},"name":"fluentd-gcp","resources":{"limits":{"memory":"300Mi"},"requests":{"cpu":"100m","memory":"200Mi"}},"volumeMounts":[{"mountPath":"/var/log","name":"varlog"},{"mountPath":"/var/lib/docker/containers","name":"varlibdockercontainers","readOnly":true},{"mountPath":"/host/lib","name":"libsystemddir","readOnly":true},{"mountPath":"/etc/fluent/config.d","name":"config-volume"}]},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=fluentd:http://localhost:31337?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.2","name":"prometheus-to-sd-exporter"}],"dnsPolicy":"Default","nodeSelector":{"beta.kubernetes.io/fluentd-ds-ready":"true"},"serviceAccountName":"fluentd-gcp","terminationGracePeriodSeconds":30,"tolerations":[{"effect":"NoSchedule","key":"node.alpha.kubernetes.io/ismaster"},{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/log"},"name":"varlog"},{"hostPath":{"path":"/var/lib/docker/containers"},"name":"varlibdockercontainers"},{"hostPath":{"path":"/usr/lib64"},"name":"libsystemddir"},{"configMap":{"name":"fluentd-gcp-config-v1.2.3"},"name":"config-volume"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: fluentd-gcp
      kubernetes.io/cluster-service: "true"
      version: v2.0.10
    name: fluentd-gcp-v2.0.10
    namespace: kube-system
    resourceVersion: "475"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/daemonsets/fluentd-gcp-v2.0.10
    uid: 32c2dff8-39ab-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: fluentd-gcp
        kubernetes.io/cluster-service: "true"
        version: v2.0.10
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: fluentd-gcp
          kubernetes.io/cluster-service: "true"
          version: v2.0.10
      spec:
        containers:
        - env:
          - name: FLUENTD_ARGS
            value: --no-supervisor -q
          image: gcr.io/google-containers/fluentd-gcp:2.0.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then
                  exit 1;
                fi; LAST_MODIFIED_DATE=`stat /var/log/fluentd-buffers | grep Modify | sed -r "s/Modify: (.*)/\1/"`; LAST_MODIFIED_TIMESTAMP=`date -d "$LAST_MODIFIED_DATE" +%s`; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $STUCK_THRESHOLD_SECONDS` ]; then
                  rm -rf /var/log/fluentd-buffers;
                  exit 1;
                fi; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $LIVENESS_THRESHOLD_SECONDS` ]; then
                  exit 1;
                fi;
            failureThreshold: 3
            initialDelaySeconds: 600
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 1
          name: fluentd-gcp
          resources:
            limits:
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          - mountPath: /host/lib
            name: libsystemddir
            readOnly: true
          - mountPath: /etc/fluent/config.d
            name: config-volume
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=fluentd:http://localhost:31337?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        nodeSelector:
          beta.kubernetes.io/fluentd-ds-ready: "true"
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: fluentd-gcp
        serviceAccountName: fluentd-gcp
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node.alpha.kubernetes.io/ismaster
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: varlibdockercontainers
        - hostPath:
            path: /usr/lib64
            type: ""
          name: libsystemddir
        - configMap:
            defaultMode: 420
            name: fluentd-gcp-config-v1.2.3
          name: config-volume
    templateGeneration: 1
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"metadata-proxy","kubernetes.io/cluster-service":"true","version":"v0.1"},"name":"metadata-proxy-v0.1","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"metadata-proxy","kubernetes.io/cluster-service":"true","version":"v0.1"}},"spec":{"containers":[{"image":"gcr.io/google_containers/metadata-proxy:v0.1.9","name":"metadata-proxy","resources":{"limits":{"cpu":"30m","memory":"25Mi"},"requests":{"cpu":"30m","memory":"25Mi"}},"securityContext":{"privileged":true}},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google_containers/prometheus-to-sd:v0.2.2","name":"prometheus-to-sd-exporter","resources":{"limits":{"cpu":"2m","memory":"20Mi"},"requests":{"cpu":"2m","memory":"20Mi"}}}],"dnsPolicy":"Default","hostNetwork":true,"nodeSelector":{"beta.kubernetes.io/metadata-proxy-ready":"true"},"serviceAccountName":"metadata-proxy","terminationGracePeriodSeconds":30}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: 2018-04-06T15:00:09Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: metadata-proxy
      kubernetes.io/cluster-service: "true"
      version: v0.1
    name: metadata-proxy-v0.1
    namespace: kube-system
    resourceVersion: "340"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/daemonsets/metadata-proxy-v0.1
    uid: 32dbad53-39ab-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metadata-proxy
        kubernetes.io/cluster-service: "true"
        version: v0.1
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metadata-proxy
          kubernetes.io/cluster-service: "true"
          version: v0.1
      spec:
        containers:
        - image: gcr.io/google_containers/metadata-proxy:v0.1.9
          imagePullPolicy: IfNotPresent
          name: metadata-proxy
          resources:
            limits:
              cpu: 30m
              memory: 25Mi
            requests:
              cpu: 30m
              memory: 25Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources:
            limits:
              cpu: 2m
              memory: 20Mi
            requests:
              cpu: 2m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/metadata-proxy-ready: "true"
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metadata-proxy
        serviceAccountName: metadata-proxy
        terminationGracePeriodSeconds: 30
    templateGeneration: 1
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    creationTimestamp: 2018-04-07T12:37:26Z
    generation: 1
    labels:
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
    name: metricbeat
    namespace: kube-system
    resourceVersion: "106706"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/daemonsets/metricbeat
    uid: 6dbe3f00-3a60-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metricbeat
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/metricbeat.yml
          - -e
          - -system.hostfs=/hostfs
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/metricbeat:6.2.3
          imagePullPolicy: Always
          name: metricbeat
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/metricbeat.yml
            name: config
            readOnly: true
            subPath: metricbeat.yml
          - mountPath: /var/run/docker.sock
            name: dockersock
          - mountPath: /hostfs/proc
            name: proc
            readOnly: true
          - mountPath: /hostfs/sys/fs/cgroup
            name: cgroup
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metricbeat
        serviceAccountName: metricbeat
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /proc
            type: ""
          name: proc
        - hostPath:
            path: /sys/fs/cgroup
            type: ""
          name: cgroup
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: dockersock
        - configMap:
            defaultMode: 384
            name: metricbeat-config
          name: config
        - emptyDir: {}
          name: data
    templateGeneration: 1
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"nvidia-gpu-device-plugin"},"name":"nvidia-gpu-device-plugin","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"nvidia-gpu-device-plugin"}},"spec":{"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"cloud.google.com/gke-accelerator","operator":"Exists"}]}]}}},"containers":[{"command":["/usr/bin/nvidia-gpu-device-plugin","-logtostderr"],"image":"gcr.io/google-containers/nvidia-gpu-device-plugin@sha256:0e79da6998a61257585e0d3fb5848240129f0fa5b4ad972dfed4049448093c33","name":"nvidia-gpu-device-plugin","resources":{"limits":{"cpu":"50m","memory":"10Mi"},"requests":{"cpu":"50m","memory":"10Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/device-plugin","name":"device-plugin"},{"mountPath":"/dev","name":"dev"}]}],"hostNetwork":true,"hostPID":true,"priorityClassName":"system-node-critical","tolerations":[{"effect":"NoSchedule","key":"nvidia.com/gpu","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/lib/kubelet/device-plugins"},"name":"device-plugin"},{"hostPath":{"path":"/dev"},"name":"dev"}]}}}}
    creationTimestamp: 2018-04-06T15:00:10Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: nvidia-gpu-device-plugin
    name: nvidia-gpu-device-plugin
    namespace: kube-system
    resourceVersion: "381"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/daemonsets/nvidia-gpu-device-plugin
    uid: 33de1856-39ab-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: nvidia-gpu-device-plugin
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: nvidia-gpu-device-plugin
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: cloud.google.com/gke-accelerator
                  operator: Exists
        containers:
        - command:
          - /usr/bin/nvidia-gpu-device-plugin
          - -logtostderr
          image: gcr.io/google-containers/nvidia-gpu-device-plugin@sha256:0e79da6998a61257585e0d3fb5848240129f0fa5b4ad972dfed4049448093c33
          imagePullPolicy: IfNotPresent
          name: nvidia-gpu-device-plugin
          resources:
            limits:
              cpu: 50m
              memory: 10Mi
            requests:
              cpu: 50m
              memory: 10Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /device-plugin
            name: device-plugin
          - mountPath: /dev
            name: dev
        dnsPolicy: ClusterFirst
        hostNetwork: true
        hostPID: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/device-plugins
            type: ""
          name: device-plugin
        - hostPath:
            path: /dev
            type: ""
          name: dev
    templateGeneration: 1
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    creationTimestamp: 2018-04-07T14:08:19Z
    generation: 1
    labels:
      k8s-app: packetbeat-dynamic
      kubernetes.io/cluster-service: "true"
    name: packetbeat-dynamic
    namespace: kube-system
    resourceVersion: "114147"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/daemonsets/packetbeat-dynamic
    uid: 1f9ab157-3a6d-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: packetbeat-dynamic
        kubernetes.io/cluster-service: "true"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: packetbeat-dynamic
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/packetbeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/packetbeat:6.2.3
          imagePullPolicy: Always
          name: packetbeat-dynamic
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/packetbeat.yml
            name: config
            readOnly: true
            subPath: packetbeat.yml
          - mountPath: /usr/share/packetbeat/data
            name: data
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: packetbeat-dynamic
        serviceAccountName: packetbeat-dynamic
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: packetbeat-dynamic-config
          name: config
        - emptyDir: {}
          name: data
    templateGeneration: 1
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"event-exporter","kubernetes.io/cluster-service":"true","version":"v0.1.8"},"name":"event-exporter-v0.1.8","namespace":"kube-system"},"spec":{"replicas":1,"template":{"metadata":{"labels":{"k8s-app":"event-exporter","version":"v0.1.8"}},"spec":{"containers":[{"command":["/event-exporter"],"image":"gcr.io/google-containers/event-exporter:v0.1.8","name":"event-exporter"},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.2","name":"prometheus-to-sd-exporter"}],"serviceAccountName":"event-exporter-sa","terminationGracePeriodSeconds":30,"volumes":[{"hostPath":{"path":"/etc/ssl/certs"},"name":"ssl-certs"}]}}}}
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: event-exporter
      kubernetes.io/cluster-service: "true"
      version: v0.1.8
    name: event-exporter-v0.1.8
    namespace: kube-system
    resourceVersion: "521"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/event-exporter-v0.1.8
    uid: 3288c77a-39ab-11e8-a5fb-42010a8001b0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        k8s-app: event-exporter
        version: v0.1.8
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: event-exporter
          version: v0.1.8
      spec:
        containers:
        - command:
          - /event-exporter
          image: gcr.io/google-containers/event-exporter:v0.1.8
          imagePullPolicy: IfNotPresent
          name: event-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: event-exporter-sa
        serviceAccountName: event-exporter-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:44Z
      lastUpdateTime: 2018-04-06T15:00:44Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: 2018-04-06T15:00:08Z
      lastUpdateTime: 2018-04-06T15:00:44Z
      message: ReplicaSet "event-exporter-v0.1.8-6bbc774f4b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"heapster","kubernetes.io/cluster-service":"true","version":"v1.5.0"},"name":"heapster-v1.5.0","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"heapster","version":"v1.5.0"}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"heapster","version":"v1.5.0"}},"spec":{"containers":[{"command":["/heapster","--source=kubernetes.summary_api:''","--sink=stackdriver:?cluster_name=demo\u0026use_old_resources=true\u0026use_new_resources=false\u0026min_interval_sec=100\u0026batch_export_timeout_sec=110"],"image":"gcr.io/google_containers/heapster-amd64:v1.5.0","livenessProbe":{"httpGet":{"path":"/healthz","port":8082,"scheme":"HTTP"},"initialDelaySeconds":180,"timeoutSeconds":5},"name":"heapster"},{"command":["/monitor","--source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.2","name":"prom-to-sd"},{"command":["/pod_nanny","--config-dir=/etc/config","--cpu=80m","--extra-cpu=0.5m","--memory=140Mi","--extra-memory=4Mi","--threshold=5","--deployment=heapster-v1.5.0","--container=heapster","--poll-period=300000","--estimator=exponential"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google_containers/addon-resizer:1.8.1","name":"heapster-nanny","resources":{"limits":{"cpu":"50m","memory":"92960Ki"},"requests":{"cpu":"50m","memory":"92960Ki"}},"volumeMounts":[{"mountPath":"/etc/config","name":"heapster-config-volume"}]}],"serviceAccountName":"heapster","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"name":"heapster-config"},"name":"heapster-config-volume"}]}}}}
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: heapster
      kubernetes.io/cluster-service: "true"
      version: v1.5.0
    name: heapster-v1.5.0
    namespace: kube-system
    resourceVersion: "618"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/heapster-v1.5.0
    uid: 315911aa-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: heapster
        version: v1.5.0
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: heapster
          version: v1.5.0
      spec:
        containers:
        - command:
          - /heapster
          - --source=kubernetes.summary_api:''
          - --sink=stackdriver:?cluster_name=demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110
          image: gcr.io/google_containers/heapster-amd64:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: heapster
          resources:
            limits:
              cpu: 88m
              memory: 204Mi
            requests:
              cpu: 88m
              memory: 204Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prom-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=80m
          - --extra-cpu=0.5m
          - --memory=140Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=heapster-v1.5.0
          - --container=heapster
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: heapster-nanny
          resources:
            limits:
              cpu: 50m
              memory: 92960Ki
            requests:
              cpu: 50m
              memory: 92960Ki
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: heapster-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: heapster
        serviceAccountName: heapster
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: heapster-config
          name: heapster-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:06Z
      lastUpdateTime: 2018-04-06T15:00:06Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true"},"name":"kube-dns","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-dns"}},"strategy":{"rollingUpdate":{"maxSurge":"10%","maxUnavailable":0}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"kube-dns"}},"spec":{"containers":[{"args":["--domain=cluster.local.","--dns-port=10053","--config-dir=/kube-dns-config","--v=2"],"env":[{"name":"PROMETHEUS_PORT","value":"10055"}],"image":"gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthcheck/kubedns","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"kubedns","ports":[{"containerPort":10053,"name":"dns-local","protocol":"UDP"},{"containerPort":10053,"name":"dns-tcp-local","protocol":"TCP"},{"containerPort":10055,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readiness","port":8081,"scheme":"HTTP"},"initialDelaySeconds":3,"timeoutSeconds":5},"resources":{"limits":{"memory":"170Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"volumeMounts":[{"mountPath":"/kube-dns-config","name":"kube-dns-config"}]},{"args":["-v=2","-logtostderr","-configDir=/etc/k8s/dns/dnsmasq-nanny","-restartDnsmasq=true","--","-k","--cache-size=1000","--no-negcache","--log-facility=-","--server=/cluster.local/127.0.0.1#10053","--server=/in-addr.arpa/127.0.0.1#10053","--server=/ip6.arpa/127.0.0.1#10053"],"image":"gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthcheck/dnsmasq","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"dnsmasq","ports":[{"containerPort":53,"name":"dns","protocol":"UDP"},{"containerPort":53,"name":"dns-tcp","protocol":"TCP"}],"resources":{"requests":{"cpu":"150m","memory":"20Mi"}},"volumeMounts":[{"mountPath":"/etc/k8s/dns/dnsmasq-nanny","name":"kube-dns-config"}]},{"args":["--v=2","--logtostderr","--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV","--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV"],"image":"gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/metrics","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"sidecar","ports":[{"containerPort":10054,"name":"metrics","protocol":"TCP"}],"resources":{"requests":{"cpu":"10m","memory":"20Mi"}}},{"command":["/monitor","--component=kubedns","--target-port=10054","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits","--v=2"],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.3","name":"prometheus-to-sd"}],"dnsPolicy":"Default","serviceAccountName":"kube-dns","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"name":"kube-dns","optional":true},"name":"kube-dns-config"}]}}}}
    creationTimestamp: 2018-04-06T15:00:07Z
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "600"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/kube-dns
    uid: 3208a82c-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 10%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - --domain=cluster.local.
          - --dns-port=10053
          - --config-dir=/kube-dns-config
          - --v=2
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/kubedns
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kubedns
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube-dns-config
            name: kube-dns-config
        - args:
          - -v=2
          - -logtostderr
          - -configDir=/etc/k8s/dns/dnsmasq-nanny
          - -restartDnsmasq=true
          - --
          - -k
          - --cache-size=1000
          - --no-negcache
          - --log-facility=-
          - --server=/cluster.local/127.0.0.1#10053
          - --server=/in-addr.arpa/127.0.0.1#10053
          - --server=/ip6.arpa/127.0.0.1#10053
          image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/dnsmasq
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/k8s/dns/dnsmasq-nanny
            name: kube-dns-config
        - args:
          - --v=2
          - --logtostderr
          - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
          - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
          image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sidecar
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --component=kubedns
          - --target-port=10054
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
          - --v=2
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns
        serviceAccountName: kube-dns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-dns
            optional: true
          name: kube-dns-config
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:54Z
      lastUpdateTime: 2018-04-06T15:00:54Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns-autoscaler","kubernetes.io/cluster-service":"true"},"name":"kube-dns-autoscaler","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"kube-dns-autoscaler"}},"spec":{"containers":[{"command":["/cluster-proportional-autoscaler","--namespace=kube-system","--configmap=kube-dns-autoscaler","--target=Deployment/kube-dns","--default-params={\"linear\":{\"coresPerReplica\":256,\"nodesPerReplica\":16,\"preventSinglePointFailure\":true}}","--logtostderr=true","--v=2"],"image":"gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2","name":"autoscaler","resources":{"requests":{"cpu":"20m","memory":"10Mi"}}}],"serviceAccountName":"kube-dns-autoscaler","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}]}}}}
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns-autoscaler
      kubernetes.io/cluster-service: "true"
    name: kube-dns-autoscaler
    namespace: kube-system
    resourceVersion: "534"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/kube-dns-autoscaler
    uid: 3243ea3a-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-dns-autoscaler
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns-autoscaler
      spec:
        containers:
        - command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --target=Deployment/kube-dns
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
          - --logtostderr=true
          - --v=2
          image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2
          imagePullPolicy: IfNotPresent
          name: autoscaler
          resources:
            requests:
              cpu: 20m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns-autoscaler
        serviceAccountName: kube-dns-autoscaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:08Z
      lastUpdateTime: 2018-04-06T15:00:08Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1beta2","kind":"Deployment","metadata":{"annotations":{},"name":"kube-state-metrics","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"kube-state-metrics"}},"template":{"metadata":{"labels":{"k8s-app":"kube-state-metrics"}},"spec":{"containers":[{"image":"quay.io/coreos/kube-state-metrics:v1.3.0","name":"kube-state-metrics","ports":[{"containerPort":8080,"name":"http-metrics"},{"containerPort":8081,"name":"telemetry"}],"readinessProbe":{"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":5,"timeoutSeconds":5}},{"command":["/pod_nanny","--container=kube-state-metrics","--cpu=100m","--extra-cpu=1m","--memory=100Mi","--extra-memory=2Mi","--threshold=5","--deployment=kube-state-metrics"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"k8s.gcr.io/addon-resizer:1.7","name":"addon-resizer","resources":{"limits":{"cpu":"100m","memory":"30Mi"},"requests":{"cpu":"100m","memory":"30Mi"}}}],"serviceAccountName":"kube-state-metrics"}}}}
    creationTimestamp: 2018-04-06T17:09:10Z
    generation: 2
    labels:
      k8s-app: kube-state-metrics
    name: kube-state-metrics
    namespace: kube-system
    resourceVersion: "11233"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/kube-state-metrics
    uid: 3931c8f4-39bd-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-state-metrics
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-state-metrics
      spec:
        containers:
        - image: quay.io/coreos/kube-state-metrics:v1.3.0
          imagePullPolicy: IfNotPresent
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http-metrics
            protocol: TCP
          - containerPort: 8081
            name: telemetry
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 103m
              memory: 106Mi
            requests:
              cpu: 103m
              memory: 106Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --container=kube-state-metrics
          - --cpu=100m
          - --extra-cpu=1m
          - --memory=100Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=kube-state-metrics
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: k8s.gcr.io/addon-resizer:1.7
          imagePullPolicy: IfNotPresent
          name: addon-resizer
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 30Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-state-metrics
        serviceAccountName: kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T17:09:27Z
      lastUpdateTime: 2018-04-06T17:09:27Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1beta2","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kubernetes-dashboard","kubernetes.io/cluster-service":"true"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kubernetes-dashboard"}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"kubernetes-dashboard"}},"spec":{"containers":[{"args":["--system-banner=We \u003ca href=\"https://goo.gl/yRsHKB\"\u003erecommend that you disable\u003c/a\u003e the Kubernetes Web UI. Use \u003ca href=\"https://console.cloud.google.com/kubernetes/workload_/dashboard/us-central1-f/demo?project=wordpress-198401\"\u003eCloud Console\u003c/a\u003e instead.","--system-banner-severity=WARNING","--auto-generate-certificates"],"image":"k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3","livenessProbe":{"httpGet":{"path":"/","port":8443,"scheme":"HTTPS"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"kubernetes-dashboard","ports":[{"containerPort":8443,"protocol":"TCP"}],"resources":{"limits":{"cpu":"100m","memory":"300Mi"},"requests":{"cpu":"50m","memory":"100Mi"}},"volumeMounts":[{"mountPath":"/certs","name":"kubernetes-dashboard-certs"},{"mountPath":"/tmp","name":"tmp-volume"}]}],"serviceAccountName":"kubernetes-dashboard","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"name":"kubernetes-dashboard-certs","secret":{"secretName":"kubernetes-dashboard-certs"}},{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kubernetes-dashboard
      kubernetes.io/cluster-service: "true"
    name: kubernetes-dashboard
    namespace: kube-system
    resourceVersion: "607"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/kubernetes-dashboard
    uid: 318d2f67-39ab-11e8-a5fb-42010a8001b0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
      spec:
        containers:
        - args:
          - --system-banner=We <a href="https://goo.gl/yRsHKB">recommend that you
            disable</a> the Kubernetes Web UI. Use <a href="https://console.cloud.google.com/kubernetes/workload_/dashboard/us-central1-f/demo?project=wordpress-198401">Cloud
            Console</a> instead.
          - --system-banner-severity=WARNING
          - --auto-generate-certificates
          image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 50m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:55Z
      lastUpdateTime: 2018-04-06T15:00:55Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: 2018-04-06T15:00:06Z
      lastUpdateTime: 2018-04-06T15:00:55Z
      message: ReplicaSet "kubernetes-dashboard-76bd96fc74" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"glbc","kubernetes.io/cluster-service":"true","kubernetes.io/name":"GLBC"},"name":"l7-default-backend","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"glbc"}},"template":{"metadata":{"labels":{"k8s-app":"glbc","name":"glbc"}},"spec":{"containers":[{"image":"gcr.io/google_containers/defaultbackend:1.3","livenessProbe":{"httpGet":{"path":"/healthz","port":8080,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":5},"name":"default-http-backend","ports":[{"containerPort":8080}],"resources":{"limits":{"cpu":"10m","memory":"20Mi"},"requests":{"cpu":"10m","memory":"20Mi"}}}]}}}}
    creationTimestamp: 2018-04-06T15:00:05Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: glbc
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: GLBC
    name: l7-default-backend
    namespace: kube-system
    resourceVersion: "515"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/l7-default-backend
    uid: 3106a4ef-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: glbc
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: glbc
          name: glbc
      spec:
        containers:
        - image: gcr.io/google_containers/defaultbackend:1.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-http-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:06Z
      lastUpdateTime: 2018-04-06T15:00:06Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-07T12:37:26Z
    generation: 1
    labels:
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
    name: metricbeat
    namespace: kube-system
    resourceVersion: "106710"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/metricbeat
    uid: 6dcbebb4-3a60-11e8-a5fb-42010a8001b0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metricbeat
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/metricbeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/metricbeat:6.2.3
          imagePullPolicy: Always
          name: metricbeat
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/metricbeat.yml
            name: config
            readOnly: true
            subPath: metricbeat.yml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: metricbeat-deployment-config
          name: config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-07T12:37:29Z
      lastUpdateTime: 2018-04-07T12:37:29Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: 2018-04-07T12:37:26Z
      lastUpdateTime: 2018-04-07T12:37:29Z
      message: ReplicaSet "metricbeat-5f7db5ccdf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"metrics-server","kubernetes.io/cluster-service":"true","version":"v0.2.1"},"name":"metrics-server-v0.2.1","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metrics-server","version":"v0.2.1"}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"metrics-server","version":"v0.2.1"},"name":"metrics-server"},"spec":{"containers":[{"command":["/metrics-server","--source=kubernetes.summary_api:''"],"image":"gcr.io/google_containers/metrics-server-amd64:v0.2.1","name":"metrics-server","ports":[{"containerPort":443,"name":"https","protocol":"TCP"}]},{"command":["/pod_nanny","--config-dir=/etc/config","--cpu=40m","--extra-cpu=0.5m","--memory=40Mi","--extra-memory=4Mi","--threshold=5","--deployment=metrics-server-v0.2.1","--container=metrics-server","--poll-period=300000","--estimator=exponential"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google_containers/addon-resizer:1.8.1","name":"metrics-server-nanny","resources":{"limits":{"cpu":"100m","memory":"300Mi"},"requests":{"cpu":"5m","memory":"50Mi"}},"volumeMounts":[{"mountPath":"/etc/config","name":"metrics-server-config-volume"}]}],"serviceAccountName":"metrics-server","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"name":"metrics-server-config"},"name":"metrics-server-config-volume"}]}}}}
    creationTimestamp: 2018-04-06T15:00:09Z
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: metrics-server
      kubernetes.io/cluster-service: "true"
      version: v0.2.1
    name: metrics-server-v0.2.1
    namespace: kube-system
    resourceVersion: "611"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/metrics-server-v0.2.1
    uid: 330b1366-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        version: v0.2.1
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          version: v0.2.1
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:''
          image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 48m
              memory: 104Mi
            requests:
              cpu: 48m
              memory: 104Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=40Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.2.1
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:09Z
      lastUpdateTime: 2018-04-06T15:00:09Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      k8s-app: event-exporter
      pod-template-hash: "2667330906"
      version: v0.1.8
    name: event-exporter-v0.1.8-6bbc774f4b
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: event-exporter-v0.1.8
      uid: 3288c77a-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "520"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/event-exporter-v0.1.8-6bbc774f4b
    uid: 328a0ac5-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: event-exporter
        pod-template-hash: "2667330906"
        version: v0.1.8
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: event-exporter
          pod-template-hash: "2667330906"
          version: v0.1.8
      spec:
        containers:
        - command:
          - /event-exporter
          image: gcr.io/google-containers/event-exporter:v0.1.8
          imagePullPolicy: IfNotPresent
          name: event-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: event-exporter-sa
        serviceAccountName: event-exporter-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: 2018-04-06T15:00:48Z
    generation: 1
    labels:
      k8s-app: heapster
      pod-template-hash: "1643280380"
      version: v1.5.0
    name: heapster-v1.5.0-5b876d47d4
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: heapster-v1.5.0
      uid: 315911aa-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "616"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/heapster-v1.5.0-5b876d47d4
    uid: 4a270d48-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: heapster
        pod-template-hash: "1643280380"
        version: v1.5.0
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: heapster
          pod-template-hash: "1643280380"
          version: v1.5.0
      spec:
        containers:
        - command:
          - /heapster
          - --source=kubernetes.summary_api:''
          - --sink=stackdriver:?cluster_name=demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110
          image: gcr.io/google_containers/heapster-amd64:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: heapster
          resources:
            limits:
              cpu: 88m
              memory: 204Mi
            requests:
              cpu: 88m
              memory: 204Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prom-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=80m
          - --extra-cpu=0.5m
          - --memory=140Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=heapster-v1.5.0
          - --container=heapster
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: heapster-nanny
          resources:
            limits:
              cpu: 50m
              memory: 92960Ki
            requests:
              cpu: 50m
              memory: 92960Ki
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: heapster-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: heapster
        serviceAccountName: heapster
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: heapster-config
          name: heapster-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 2
    labels:
      k8s-app: heapster
      pod-template-hash: "3810610478"
      version: v1.5.0
    name: heapster-v1.5.0-7d54b548cd
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: heapster-v1.5.0
      uid: 315911aa-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "575"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/heapster-v1.5.0-7d54b548cd
    uid: 315a37fd-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: heapster
        pod-template-hash: "3810610478"
        version: v1.5.0
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: heapster
          pod-template-hash: "3810610478"
          version: v1.5.0
      spec:
        containers:
        - command:
          - /heapster
          - --source=kubernetes.summary_api:''
          - --sink=stackdriver:?cluster_name=demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110
          image: gcr.io/google_containers/heapster-amd64:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: heapster
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prom-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=80m
          - --extra-cpu=0.5m
          - --memory=140Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=heapster-v1.5.0
          - --container=heapster
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: heapster-nanny
          resources:
            limits:
              cpu: 50m
              memory: 92960Ki
            requests:
              cpu: 50m
              memory: 92960Ki
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: heapster-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: heapster
        serviceAccountName: heapster
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: heapster-config
          name: heapster-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:07Z
    generation: 2
    labels:
      k8s-app: kube-dns
      pod-template-hash: "1714400046"
    name: kube-dns-5c5884448b
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-dns
      uid: 3208a82c-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "598"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/kube-dns-5c5884448b
    uid: 320a3f96-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: "1714400046"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: "1714400046"
      spec:
        containers:
        - args:
          - --domain=cluster.local.
          - --dns-port=10053
          - --config-dir=/kube-dns-config
          - --v=2
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/kubedns
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kubedns
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube-dns-config
            name: kube-dns-config
        - args:
          - -v=2
          - -logtostderr
          - -configDir=/etc/k8s/dns/dnsmasq-nanny
          - -restartDnsmasq=true
          - --
          - -k
          - --cache-size=1000
          - --no-negcache
          - --log-facility=-
          - --server=/cluster.local/127.0.0.1#10053
          - --server=/in-addr.arpa/127.0.0.1#10053
          - --server=/ip6.arpa/127.0.0.1#10053
          image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/dnsmasq
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/k8s/dns/dnsmasq-nanny
            name: kube-dns-config
        - args:
          - --v=2
          - --logtostderr
          - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
          - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
          image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sidecar
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --component=kubedns
          - --target-port=10054
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
          - --v=2
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns
        serviceAccountName: kube-dns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-dns
            optional: true
          name: kube-dns-config
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      k8s-app: kube-dns-autoscaler
      pod-template-hash: "2571768788"
    name: kube-dns-autoscaler-69c5cbdcdd
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-dns-autoscaler
      uid: 3243ea3a-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "533"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/kube-dns-autoscaler-69c5cbdcdd
    uid: 3244ef5a-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-dns-autoscaler
        pod-template-hash: "2571768788"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns-autoscaler
          pod-template-hash: "2571768788"
      spec:
        containers:
        - command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --target=Deployment/kube-dns
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
          - --logtostderr=true
          - --v=2
          image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2
          imagePullPolicy: IfNotPresent
          name: autoscaler
          resources:
            requests:
              cpu: 20m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns-autoscaler
        serviceAccountName: kube-dns-autoscaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: 2018-04-06T17:09:25Z
    generation: 1
    labels:
      k8s-app: kube-state-metrics
      pod-template-hash: "1297930811"
    name: kube-state-metrics-56fcf74d55
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-state-metrics
      uid: 3931c8f4-39bd-11e8-a5fb-42010a8001b0
    resourceVersion: "11225"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/kube-state-metrics-56fcf74d55
    uid: 4234b023-39bd-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-state-metrics
        pod-template-hash: "1297930811"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-state-metrics
          pod-template-hash: "1297930811"
      spec:
        containers:
        - image: quay.io/coreos/kube-state-metrics:v1.3.0
          imagePullPolicy: IfNotPresent
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http-metrics
            protocol: TCP
          - containerPort: 8081
            name: telemetry
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 103m
              memory: 106Mi
            requests:
              cpu: 103m
              memory: 106Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --container=kube-state-metrics
          - --cpu=100m
          - --extra-cpu=1m
          - --memory=100Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=kube-state-metrics
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: k8s.gcr.io/addon-resizer:1.7
          imagePullPolicy: IfNotPresent
          name: addon-resizer
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 30Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-state-metrics
        serviceAccountName: kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T17:09:10Z
    generation: 2
    labels:
      k8s-app: kube-state-metrics
      pod-template-hash: "4288412893"
    name: kube-state-metrics-86dd856df7
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-state-metrics
      uid: 3931c8f4-39bd-11e8-a5fb-42010a8001b0
    resourceVersion: "11232"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/kube-state-metrics-86dd856df7
    uid: 39333783-39bd-11e8-a5fb-42010a8001b0
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: kube-state-metrics
        pod-template-hash: "4288412893"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-state-metrics
          pod-template-hash: "4288412893"
      spec:
        containers:
        - image: quay.io/coreos/kube-state-metrics:v1.3.0
          imagePullPolicy: IfNotPresent
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http-metrics
            protocol: TCP
          - containerPort: 8081
            name: telemetry
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --container=kube-state-metrics
          - --cpu=100m
          - --extra-cpu=1m
          - --memory=100Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=kube-state-metrics
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: k8s.gcr.io/addon-resizer:1.7
          imagePullPolicy: IfNotPresent
          name: addon-resizer
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 30Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-state-metrics
        serviceAccountName: kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: "3268529730"
    name: kubernetes-dashboard-76bd96fc74
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard
      uid: 318d2f67-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "605"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/kubernetes-dashboard-76bd96fc74
    uid: 318e5daa-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
        pod-template-hash: "3268529730"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
          pod-template-hash: "3268529730"
      spec:
        containers:
        - args:
          - --system-banner=We <a href="https://goo.gl/yRsHKB">recommend that you
            disable</a> the Kubernetes Web UI. Use <a href="https://console.cloud.google.com/kubernetes/workload_/dashboard/us-central1-f/demo?project=wordpress-198401">Cloud
            Console</a> instead.
          - --system-banner-severity=WARNING
          - --auto-generate-certificates
          image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 50m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 1
    labels:
      k8s-app: glbc
      name: glbc
      pod-template-hash: "1341271911"
    name: l7-default-backend-57856c5f55
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: l7-default-backend
      uid: 3106a4ef-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "513"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/l7-default-backend-57856c5f55
    uid: 310e65e3-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: glbc
        pod-template-hash: "1341271911"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: glbc
          name: glbc
          pod-template-hash: "1341271911"
      spec:
        containers:
        - image: gcr.io/google_containers/defaultbackend:1.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-http-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-07T12:37:26Z
    generation: 1
    labels:
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
      pod-template-hash: "1938617789"
    name: metricbeat-5f7db5ccdf
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metricbeat
      uid: 6dcbebb4-3a60-11e8-a5fb-42010a8001b0
    resourceVersion: "106709"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/metricbeat-5f7db5ccdf
    uid: 6dcd13ca-3a60-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
        pod-template-hash: "1938617789"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metricbeat
          kubernetes.io/cluster-service: "true"
          pod-template-hash: "1938617789"
      spec:
        containers:
        - args:
          - -c
          - /etc/metricbeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/metricbeat:6.2.3
          imagePullPolicy: Always
          name: metricbeat
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/metricbeat.yml
            name: config
            readOnly: true
            subPath: metricbeat.yml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: metricbeat-deployment-config
          name: config
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:09Z
    generation: 2
    labels:
      k8s-app: metrics-server
      pod-template-hash: "1096621673"
      version: v0.2.1
    name: metrics-server-v0.2.1-54fbb65bc7
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server-v0.2.1
      uid: 330b1366-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "562"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/metrics-server-v0.2.1-54fbb65bc7
    uid: 330bfda2-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: "1096621673"
        version: v0.2.1
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: "1096621673"
          version: v0.2.1
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:''
          image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=40Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.2.1
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: extensions/v1beta1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: 2018-04-06T15:00:47Z
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: "3948854749"
      version: v0.2.1
    name: metrics-server-v0.2.1-7f8dd98c8f
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server-v0.2.1
      uid: 330b1366-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "609"
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/replicasets/metrics-server-v0.2.1-7f8dd98c8f
    uid: 49c6e157-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: "3948854749"
        version: v0.2.1
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: "3948854749"
          version: v0.2.1
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:''
          image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 48m
              memory: 104Mi
            requests:
              cpu: 48m
              memory: 104Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=40Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.2.1
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: 2018-04-07T12:29:24Z
    generation: 1
    labels:
      k8s-app: filebeat-dynamic
      kubernetes.io/cluster-service: "true"
    name: filebeat-dynamic
    namespace: kube-system
    resourceVersion: "105969"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/filebeat-dynamic
    uid: 4e207a1d-3a5f-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: filebeat-dynamic
        kubernetes.io/cluster-service: "true"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: filebeat-dynamic
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/filebeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/filebeat:6.2.3
          imagePullPolicy: Always
          name: filebeat-dynamic
          resources: {}
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/filebeat.yml
            name: config
            readOnly: true
            subPath: filebeat.yml
          - mountPath: /usr/share/filebeat/data
            name: data
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          - mountPath: /var/run/docker.sock
            name: dockersock
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: filebeat-dynamic
        serviceAccountName: filebeat-dynamic
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: filebeat-dynamic-config
          name: config
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: varlibdockercontainers
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: dockersock
        - emptyDir: {}
          name: data
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"fluentd-gcp","kubernetes.io/cluster-service":"true","version":"v2.0.10"},"name":"fluentd-gcp-v2.0.10","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"fluentd-gcp","kubernetes.io/cluster-service":"true","version":"v2.0.10"}},"spec":{"containers":[{"env":[{"name":"FLUENTD_ARGS","value":"--no-supervisor -q"}],"image":"gcr.io/google-containers/fluentd-gcp:2.0.10","livenessProbe":{"exec":{"command":["/bin/sh","-c","LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then\n  exit 1;\nfi; LAST_MODIFIED_DATE=`stat /var/log/fluentd-buffers | grep Modify | sed -r \"s/Modify: (.*)/\\1/\"`; LAST_MODIFIED_TIMESTAMP=`date -d \"$LAST_MODIFIED_DATE\" +%s`; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $STUCK_THRESHOLD_SECONDS` ]; then\n  rm -rf /var/log/fluentd-buffers;\n  exit 1;\nfi; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $LIVENESS_THRESHOLD_SECONDS` ]; then\n  exit 1;\nfi;\n"]},"initialDelaySeconds":600,"periodSeconds":60},"name":"fluentd-gcp","resources":{"limits":{"memory":"300Mi"},"requests":{"cpu":"100m","memory":"200Mi"}},"volumeMounts":[{"mountPath":"/var/log","name":"varlog"},{"mountPath":"/var/lib/docker/containers","name":"varlibdockercontainers","readOnly":true},{"mountPath":"/host/lib","name":"libsystemddir","readOnly":true},{"mountPath":"/etc/fluent/config.d","name":"config-volume"}]},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=fluentd:http://localhost:31337?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.2","name":"prometheus-to-sd-exporter"}],"dnsPolicy":"Default","nodeSelector":{"beta.kubernetes.io/fluentd-ds-ready":"true"},"serviceAccountName":"fluentd-gcp","terminationGracePeriodSeconds":30,"tolerations":[{"effect":"NoSchedule","key":"node.alpha.kubernetes.io/ismaster"},{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/log"},"name":"varlog"},{"hostPath":{"path":"/var/lib/docker/containers"},"name":"varlibdockercontainers"},{"hostPath":{"path":"/usr/lib64"},"name":"libsystemddir"},{"configMap":{"name":"fluentd-gcp-config-v1.2.3"},"name":"config-volume"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: fluentd-gcp
      kubernetes.io/cluster-service: "true"
      version: v2.0.10
    name: fluentd-gcp-v2.0.10
    namespace: kube-system
    resourceVersion: "475"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/fluentd-gcp-v2.0.10
    uid: 32c2dff8-39ab-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: fluentd-gcp
        kubernetes.io/cluster-service: "true"
        version: v2.0.10
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: fluentd-gcp
          kubernetes.io/cluster-service: "true"
          version: v2.0.10
      spec:
        containers:
        - env:
          - name: FLUENTD_ARGS
            value: --no-supervisor -q
          image: gcr.io/google-containers/fluentd-gcp:2.0.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then
                  exit 1;
                fi; LAST_MODIFIED_DATE=`stat /var/log/fluentd-buffers | grep Modify | sed -r "s/Modify: (.*)/\1/"`; LAST_MODIFIED_TIMESTAMP=`date -d "$LAST_MODIFIED_DATE" +%s`; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $STUCK_THRESHOLD_SECONDS` ]; then
                  rm -rf /var/log/fluentd-buffers;
                  exit 1;
                fi; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $LIVENESS_THRESHOLD_SECONDS` ]; then
                  exit 1;
                fi;
            failureThreshold: 3
            initialDelaySeconds: 600
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 1
          name: fluentd-gcp
          resources:
            limits:
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          - mountPath: /host/lib
            name: libsystemddir
            readOnly: true
          - mountPath: /etc/fluent/config.d
            name: config-volume
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=fluentd:http://localhost:31337?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        nodeSelector:
          beta.kubernetes.io/fluentd-ds-ready: "true"
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: fluentd-gcp
        serviceAccountName: fluentd-gcp
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node.alpha.kubernetes.io/ismaster
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: varlibdockercontainers
        - hostPath:
            path: /usr/lib64
            type: ""
          name: libsystemddir
        - configMap:
            defaultMode: 420
            name: fluentd-gcp-config-v1.2.3
          name: config-volume
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"metadata-proxy","kubernetes.io/cluster-service":"true","version":"v0.1"},"name":"metadata-proxy-v0.1","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"metadata-proxy","kubernetes.io/cluster-service":"true","version":"v0.1"}},"spec":{"containers":[{"image":"gcr.io/google_containers/metadata-proxy:v0.1.9","name":"metadata-proxy","resources":{"limits":{"cpu":"30m","memory":"25Mi"},"requests":{"cpu":"30m","memory":"25Mi"}},"securityContext":{"privileged":true}},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google_containers/prometheus-to-sd:v0.2.2","name":"prometheus-to-sd-exporter","resources":{"limits":{"cpu":"2m","memory":"20Mi"},"requests":{"cpu":"2m","memory":"20Mi"}}}],"dnsPolicy":"Default","hostNetwork":true,"nodeSelector":{"beta.kubernetes.io/metadata-proxy-ready":"true"},"serviceAccountName":"metadata-proxy","terminationGracePeriodSeconds":30}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: 2018-04-06T15:00:09Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: metadata-proxy
      kubernetes.io/cluster-service: "true"
      version: v0.1
    name: metadata-proxy-v0.1
    namespace: kube-system
    resourceVersion: "340"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/metadata-proxy-v0.1
    uid: 32dbad53-39ab-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metadata-proxy
        kubernetes.io/cluster-service: "true"
        version: v0.1
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metadata-proxy
          kubernetes.io/cluster-service: "true"
          version: v0.1
      spec:
        containers:
        - image: gcr.io/google_containers/metadata-proxy:v0.1.9
          imagePullPolicy: IfNotPresent
          name: metadata-proxy
          resources:
            limits:
              cpu: 30m
              memory: 25Mi
            requests:
              cpu: 30m
              memory: 25Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=metadata_proxy:http://127.0.0.1:989?whitelisted=request_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources:
            limits:
              cpu: 2m
              memory: 20Mi
            requests:
              cpu: 2m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/metadata-proxy-ready: "true"
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metadata-proxy
        serviceAccountName: metadata-proxy
        terminationGracePeriodSeconds: 30
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: 2018-04-07T12:37:26Z
    generation: 1
    labels:
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
    name: metricbeat
    namespace: kube-system
    resourceVersion: "106706"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/metricbeat
    uid: 6dbe3f00-3a60-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metricbeat
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/metricbeat.yml
          - -e
          - -system.hostfs=/hostfs
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/metricbeat:6.2.3
          imagePullPolicy: Always
          name: metricbeat
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/metricbeat.yml
            name: config
            readOnly: true
            subPath: metricbeat.yml
          - mountPath: /var/run/docker.sock
            name: dockersock
          - mountPath: /hostfs/proc
            name: proc
            readOnly: true
          - mountPath: /hostfs/sys/fs/cgroup
            name: cgroup
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metricbeat
        serviceAccountName: metricbeat
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /proc
            type: ""
          name: proc
        - hostPath:
            path: /sys/fs/cgroup
            type: ""
          name: cgroup
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: dockersock
        - configMap:
            defaultMode: 384
            name: metricbeat-config
          name: config
        - emptyDir: {}
          name: data
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"nvidia-gpu-device-plugin"},"name":"nvidia-gpu-device-plugin","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"nvidia-gpu-device-plugin"}},"spec":{"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"cloud.google.com/gke-accelerator","operator":"Exists"}]}]}}},"containers":[{"command":["/usr/bin/nvidia-gpu-device-plugin","-logtostderr"],"image":"gcr.io/google-containers/nvidia-gpu-device-plugin@sha256:0e79da6998a61257585e0d3fb5848240129f0fa5b4ad972dfed4049448093c33","name":"nvidia-gpu-device-plugin","resources":{"limits":{"cpu":"50m","memory":"10Mi"},"requests":{"cpu":"50m","memory":"10Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/device-plugin","name":"device-plugin"},{"mountPath":"/dev","name":"dev"}]}],"hostNetwork":true,"hostPID":true,"priorityClassName":"system-node-critical","tolerations":[{"effect":"NoSchedule","key":"nvidia.com/gpu","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/lib/kubelet/device-plugins"},"name":"device-plugin"},{"hostPath":{"path":"/dev"},"name":"dev"}]}}}}
    creationTimestamp: 2018-04-06T15:00:10Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: nvidia-gpu-device-plugin
    name: nvidia-gpu-device-plugin
    namespace: kube-system
    resourceVersion: "381"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/nvidia-gpu-device-plugin
    uid: 33de1856-39ab-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: nvidia-gpu-device-plugin
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: nvidia-gpu-device-plugin
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: cloud.google.com/gke-accelerator
                  operator: Exists
        containers:
        - command:
          - /usr/bin/nvidia-gpu-device-plugin
          - -logtostderr
          image: gcr.io/google-containers/nvidia-gpu-device-plugin@sha256:0e79da6998a61257585e0d3fb5848240129f0fa5b4ad972dfed4049448093c33
          imagePullPolicy: IfNotPresent
          name: nvidia-gpu-device-plugin
          resources:
            limits:
              cpu: 50m
              memory: 10Mi
            requests:
              cpu: 50m
              memory: 10Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /device-plugin
            name: device-plugin
          - mountPath: /dev
            name: dev
        dnsPolicy: ClusterFirst
        hostNetwork: true
        hostPID: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/device-plugins
            type: ""
          name: device-plugin
        - hostPath:
            path: /dev
            type: ""
          name: dev
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0
    observedGeneration: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: 2018-04-07T14:08:19Z
    generation: 1
    labels:
      k8s-app: packetbeat-dynamic
      kubernetes.io/cluster-service: "true"
    name: packetbeat-dynamic
    namespace: kube-system
    resourceVersion: "114147"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/packetbeat-dynamic
    uid: 1f9ab157-3a6d-11e8-a5fb-42010a8001b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: packetbeat-dynamic
        kubernetes.io/cluster-service: "true"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: packetbeat-dynamic
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/packetbeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/packetbeat:6.2.3
          imagePullPolicy: Always
          name: packetbeat-dynamic
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/packetbeat.yml
            name: config
            readOnly: true
            subPath: packetbeat.yml
          - mountPath: /usr/share/packetbeat/data
            name: data
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: packetbeat-dynamic
        serviceAccountName: packetbeat-dynamic
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: packetbeat-dynamic-config
          name: config
        - emptyDir: {}
          name: data
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"event-exporter","kubernetes.io/cluster-service":"true","version":"v0.1.8"},"name":"event-exporter-v0.1.8","namespace":"kube-system"},"spec":{"replicas":1,"template":{"metadata":{"labels":{"k8s-app":"event-exporter","version":"v0.1.8"}},"spec":{"containers":[{"command":["/event-exporter"],"image":"gcr.io/google-containers/event-exporter:v0.1.8","name":"event-exporter"},{"command":["/monitor","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.2","name":"prometheus-to-sd-exporter"}],"serviceAccountName":"event-exporter-sa","terminationGracePeriodSeconds":30,"volumes":[{"hostPath":{"path":"/etc/ssl/certs"},"name":"ssl-certs"}]}}}}
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: event-exporter
      kubernetes.io/cluster-service: "true"
      version: v0.1.8
    name: event-exporter-v0.1.8
    namespace: kube-system
    resourceVersion: "521"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/event-exporter-v0.1.8
    uid: 3288c77a-39ab-11e8-a5fb-42010a8001b0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        k8s-app: event-exporter
        version: v0.1.8
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: event-exporter
          version: v0.1.8
      spec:
        containers:
        - command:
          - /event-exporter
          image: gcr.io/google-containers/event-exporter:v0.1.8
          imagePullPolicy: IfNotPresent
          name: event-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: event-exporter-sa
        serviceAccountName: event-exporter-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:44Z
      lastUpdateTime: 2018-04-06T15:00:44Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: 2018-04-06T15:00:08Z
      lastUpdateTime: 2018-04-06T15:00:44Z
      message: ReplicaSet "event-exporter-v0.1.8-6bbc774f4b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"heapster","kubernetes.io/cluster-service":"true","version":"v1.5.0"},"name":"heapster-v1.5.0","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"heapster","version":"v1.5.0"}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"heapster","version":"v1.5.0"}},"spec":{"containers":[{"command":["/heapster","--source=kubernetes.summary_api:''","--sink=stackdriver:?cluster_name=demo\u0026use_old_resources=true\u0026use_new_resources=false\u0026min_interval_sec=100\u0026batch_export_timeout_sec=110"],"image":"gcr.io/google_containers/heapster-amd64:v1.5.0","livenessProbe":{"httpGet":{"path":"/healthz","port":8082,"scheme":"HTTP"},"initialDelaySeconds":180,"timeoutSeconds":5},"name":"heapster"},{"command":["/monitor","--source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--pod-id=$(POD_NAME)","--namespace-id=$(POD_NAMESPACE)"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.2","name":"prom-to-sd"},{"command":["/pod_nanny","--config-dir=/etc/config","--cpu=80m","--extra-cpu=0.5m","--memory=140Mi","--extra-memory=4Mi","--threshold=5","--deployment=heapster-v1.5.0","--container=heapster","--poll-period=300000","--estimator=exponential"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google_containers/addon-resizer:1.8.1","name":"heapster-nanny","resources":{"limits":{"cpu":"50m","memory":"92960Ki"},"requests":{"cpu":"50m","memory":"92960Ki"}},"volumeMounts":[{"mountPath":"/etc/config","name":"heapster-config-volume"}]}],"serviceAccountName":"heapster","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"name":"heapster-config"},"name":"heapster-config-volume"}]}}}}
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: heapster
      kubernetes.io/cluster-service: "true"
      version: v1.5.0
    name: heapster-v1.5.0
    namespace: kube-system
    resourceVersion: "618"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/heapster-v1.5.0
    uid: 315911aa-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: heapster
        version: v1.5.0
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: heapster
          version: v1.5.0
      spec:
        containers:
        - command:
          - /heapster
          - --source=kubernetes.summary_api:''
          - --sink=stackdriver:?cluster_name=demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110
          image: gcr.io/google_containers/heapster-amd64:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: heapster
          resources:
            limits:
              cpu: 88m
              memory: 204Mi
            requests:
              cpu: 88m
              memory: 204Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prom-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=80m
          - --extra-cpu=0.5m
          - --memory=140Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=heapster-v1.5.0
          - --container=heapster
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: heapster-nanny
          resources:
            limits:
              cpu: 50m
              memory: 92960Ki
            requests:
              cpu: 50m
              memory: 92960Ki
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: heapster-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: heapster
        serviceAccountName: heapster
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: heapster-config
          name: heapster-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:06Z
      lastUpdateTime: 2018-04-06T15:00:06Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true"},"name":"kube-dns","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-dns"}},"strategy":{"rollingUpdate":{"maxSurge":"10%","maxUnavailable":0}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"kube-dns"}},"spec":{"containers":[{"args":["--domain=cluster.local.","--dns-port=10053","--config-dir=/kube-dns-config","--v=2"],"env":[{"name":"PROMETHEUS_PORT","value":"10055"}],"image":"gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthcheck/kubedns","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"kubedns","ports":[{"containerPort":10053,"name":"dns-local","protocol":"UDP"},{"containerPort":10053,"name":"dns-tcp-local","protocol":"TCP"},{"containerPort":10055,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readiness","port":8081,"scheme":"HTTP"},"initialDelaySeconds":3,"timeoutSeconds":5},"resources":{"limits":{"memory":"170Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"volumeMounts":[{"mountPath":"/kube-dns-config","name":"kube-dns-config"}]},{"args":["-v=2","-logtostderr","-configDir=/etc/k8s/dns/dnsmasq-nanny","-restartDnsmasq=true","--","-k","--cache-size=1000","--no-negcache","--log-facility=-","--server=/cluster.local/127.0.0.1#10053","--server=/in-addr.arpa/127.0.0.1#10053","--server=/ip6.arpa/127.0.0.1#10053"],"image":"gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthcheck/dnsmasq","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"dnsmasq","ports":[{"containerPort":53,"name":"dns","protocol":"UDP"},{"containerPort":53,"name":"dns-tcp","protocol":"TCP"}],"resources":{"requests":{"cpu":"150m","memory":"20Mi"}},"volumeMounts":[{"mountPath":"/etc/k8s/dns/dnsmasq-nanny","name":"kube-dns-config"}]},{"args":["--v=2","--logtostderr","--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV","--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV"],"image":"gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/metrics","port":10054,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"sidecar","ports":[{"containerPort":10054,"name":"metrics","protocol":"TCP"}],"resources":{"requests":{"cpu":"10m","memory":"20Mi"}}},{"command":["/monitor","--component=kubedns","--target-port=10054","--stackdriver-prefix=container.googleapis.com/internal/addons","--api-override=https://monitoring.googleapis.com/","--whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits","--v=2"],"image":"gcr.io/google-containers/prometheus-to-sd:v0.2.3","name":"prometheus-to-sd"}],"dnsPolicy":"Default","serviceAccountName":"kube-dns","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"name":"kube-dns","optional":true},"name":"kube-dns-config"}]}}}}
    creationTimestamp: 2018-04-06T15:00:07Z
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "600"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/kube-dns
    uid: 3208a82c-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 10%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - --domain=cluster.local.
          - --dns-port=10053
          - --config-dir=/kube-dns-config
          - --v=2
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/kubedns
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kubedns
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube-dns-config
            name: kube-dns-config
        - args:
          - -v=2
          - -logtostderr
          - -configDir=/etc/k8s/dns/dnsmasq-nanny
          - -restartDnsmasq=true
          - --
          - -k
          - --cache-size=1000
          - --no-negcache
          - --log-facility=-
          - --server=/cluster.local/127.0.0.1#10053
          - --server=/in-addr.arpa/127.0.0.1#10053
          - --server=/ip6.arpa/127.0.0.1#10053
          image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/dnsmasq
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/k8s/dns/dnsmasq-nanny
            name: kube-dns-config
        - args:
          - --v=2
          - --logtostderr
          - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
          - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
          image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sidecar
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --component=kubedns
          - --target-port=10054
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
          - --v=2
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns
        serviceAccountName: kube-dns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-dns
            optional: true
          name: kube-dns-config
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:54Z
      lastUpdateTime: 2018-04-06T15:00:54Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns-autoscaler","kubernetes.io/cluster-service":"true"},"name":"kube-dns-autoscaler","namespace":"kube-system"},"spec":{"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"kube-dns-autoscaler"}},"spec":{"containers":[{"command":["/cluster-proportional-autoscaler","--namespace=kube-system","--configmap=kube-dns-autoscaler","--target=Deployment/kube-dns","--default-params={\"linear\":{\"coresPerReplica\":256,\"nodesPerReplica\":16,\"preventSinglePointFailure\":true}}","--logtostderr=true","--v=2"],"image":"gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2","name":"autoscaler","resources":{"requests":{"cpu":"20m","memory":"10Mi"}}}],"serviceAccountName":"kube-dns-autoscaler","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}]}}}}
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns-autoscaler
      kubernetes.io/cluster-service: "true"
    name: kube-dns-autoscaler
    namespace: kube-system
    resourceVersion: "534"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/kube-dns-autoscaler
    uid: 3243ea3a-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-dns-autoscaler
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns-autoscaler
      spec:
        containers:
        - command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --target=Deployment/kube-dns
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
          - --logtostderr=true
          - --v=2
          image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2
          imagePullPolicy: IfNotPresent
          name: autoscaler
          resources:
            requests:
              cpu: 20m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns-autoscaler
        serviceAccountName: kube-dns-autoscaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:08Z
      lastUpdateTime: 2018-04-06T15:00:08Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1beta2","kind":"Deployment","metadata":{"annotations":{},"name":"kube-state-metrics","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"kube-state-metrics"}},"template":{"metadata":{"labels":{"k8s-app":"kube-state-metrics"}},"spec":{"containers":[{"image":"quay.io/coreos/kube-state-metrics:v1.3.0","name":"kube-state-metrics","ports":[{"containerPort":8080,"name":"http-metrics"},{"containerPort":8081,"name":"telemetry"}],"readinessProbe":{"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":5,"timeoutSeconds":5}},{"command":["/pod_nanny","--container=kube-state-metrics","--cpu=100m","--extra-cpu=1m","--memory=100Mi","--extra-memory=2Mi","--threshold=5","--deployment=kube-state-metrics"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"k8s.gcr.io/addon-resizer:1.7","name":"addon-resizer","resources":{"limits":{"cpu":"100m","memory":"30Mi"},"requests":{"cpu":"100m","memory":"30Mi"}}}],"serviceAccountName":"kube-state-metrics"}}}}
    creationTimestamp: 2018-04-06T17:09:10Z
    generation: 2
    labels:
      k8s-app: kube-state-metrics
    name: kube-state-metrics
    namespace: kube-system
    resourceVersion: "11233"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/kube-state-metrics
    uid: 3931c8f4-39bd-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-state-metrics
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-state-metrics
      spec:
        containers:
        - image: quay.io/coreos/kube-state-metrics:v1.3.0
          imagePullPolicy: IfNotPresent
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http-metrics
            protocol: TCP
          - containerPort: 8081
            name: telemetry
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 103m
              memory: 106Mi
            requests:
              cpu: 103m
              memory: 106Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --container=kube-state-metrics
          - --cpu=100m
          - --extra-cpu=1m
          - --memory=100Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=kube-state-metrics
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: k8s.gcr.io/addon-resizer:1.7
          imagePullPolicy: IfNotPresent
          name: addon-resizer
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 30Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-state-metrics
        serviceAccountName: kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T17:09:27Z
      lastUpdateTime: 2018-04-06T17:09:27Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1beta2","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kubernetes-dashboard","kubernetes.io/cluster-service":"true"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kubernetes-dashboard"}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"kubernetes-dashboard"}},"spec":{"containers":[{"args":["--system-banner=We \u003ca href=\"https://goo.gl/yRsHKB\"\u003erecommend that you disable\u003c/a\u003e the Kubernetes Web UI. Use \u003ca href=\"https://console.cloud.google.com/kubernetes/workload_/dashboard/us-central1-f/demo?project=wordpress-198401\"\u003eCloud Console\u003c/a\u003e instead.","--system-banner-severity=WARNING","--auto-generate-certificates"],"image":"k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3","livenessProbe":{"httpGet":{"path":"/","port":8443,"scheme":"HTTPS"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"kubernetes-dashboard","ports":[{"containerPort":8443,"protocol":"TCP"}],"resources":{"limits":{"cpu":"100m","memory":"300Mi"},"requests":{"cpu":"50m","memory":"100Mi"}},"volumeMounts":[{"mountPath":"/certs","name":"kubernetes-dashboard-certs"},{"mountPath":"/tmp","name":"tmp-volume"}]}],"serviceAccountName":"kubernetes-dashboard","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"name":"kubernetes-dashboard-certs","secret":{"secretName":"kubernetes-dashboard-certs"}},{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kubernetes-dashboard
      kubernetes.io/cluster-service: "true"
    name: kubernetes-dashboard
    namespace: kube-system
    resourceVersion: "607"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/kubernetes-dashboard
    uid: 318d2f67-39ab-11e8-a5fb-42010a8001b0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
      spec:
        containers:
        - args:
          - --system-banner=We <a href="https://goo.gl/yRsHKB">recommend that you
            disable</a> the Kubernetes Web UI. Use <a href="https://console.cloud.google.com/kubernetes/workload_/dashboard/us-central1-f/demo?project=wordpress-198401">Cloud
            Console</a> instead.
          - --system-banner-severity=WARNING
          - --auto-generate-certificates
          image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 50m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:55Z
      lastUpdateTime: 2018-04-06T15:00:55Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: 2018-04-06T15:00:06Z
      lastUpdateTime: 2018-04-06T15:00:55Z
      message: ReplicaSet "kubernetes-dashboard-76bd96fc74" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"glbc","kubernetes.io/cluster-service":"true","kubernetes.io/name":"GLBC"},"name":"l7-default-backend","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"glbc"}},"template":{"metadata":{"labels":{"k8s-app":"glbc","name":"glbc"}},"spec":{"containers":[{"image":"gcr.io/google_containers/defaultbackend:1.3","livenessProbe":{"httpGet":{"path":"/healthz","port":8080,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":5},"name":"default-http-backend","ports":[{"containerPort":8080}],"resources":{"limits":{"cpu":"10m","memory":"20Mi"},"requests":{"cpu":"10m","memory":"20Mi"}}}]}}}}
    creationTimestamp: 2018-04-06T15:00:05Z
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: glbc
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: GLBC
    name: l7-default-backend
    namespace: kube-system
    resourceVersion: "515"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/l7-default-backend
    uid: 3106a4ef-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: glbc
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: glbc
          name: glbc
      spec:
        containers:
        - image: gcr.io/google_containers/defaultbackend:1.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-http-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:06Z
      lastUpdateTime: 2018-04-06T15:00:06Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-07T12:37:26Z
    generation: 1
    labels:
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
    name: metricbeat
    namespace: kube-system
    resourceVersion: "106710"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/metricbeat
    uid: 6dcbebb4-3a60-11e8-a5fb-42010a8001b0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metricbeat
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - -c
          - /etc/metricbeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/metricbeat:6.2.3
          imagePullPolicy: Always
          name: metricbeat
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/metricbeat.yml
            name: config
            readOnly: true
            subPath: metricbeat.yml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: metricbeat-deployment-config
          name: config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-07T12:37:29Z
      lastUpdateTime: 2018-04-07T12:37:29Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: 2018-04-07T12:37:26Z
      lastUpdateTime: 2018-04-07T12:37:29Z
      message: ReplicaSet "metricbeat-5f7db5ccdf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"metrics-server","kubernetes.io/cluster-service":"true","version":"v0.2.1"},"name":"metrics-server-v0.2.1","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metrics-server","version":"v0.2.1"}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"metrics-server","version":"v0.2.1"},"name":"metrics-server"},"spec":{"containers":[{"command":["/metrics-server","--source=kubernetes.summary_api:''"],"image":"gcr.io/google_containers/metrics-server-amd64:v0.2.1","name":"metrics-server","ports":[{"containerPort":443,"name":"https","protocol":"TCP"}]},{"command":["/pod_nanny","--config-dir=/etc/config","--cpu=40m","--extra-cpu=0.5m","--memory=40Mi","--extra-memory=4Mi","--threshold=5","--deployment=metrics-server-v0.2.1","--container=metrics-server","--poll-period=300000","--estimator=exponential"],"env":[{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google_containers/addon-resizer:1.8.1","name":"metrics-server-nanny","resources":{"limits":{"cpu":"100m","memory":"300Mi"},"requests":{"cpu":"5m","memory":"50Mi"}},"volumeMounts":[{"mountPath":"/etc/config","name":"metrics-server-config-volume"}]}],"serviceAccountName":"metrics-server","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"name":"metrics-server-config"},"name":"metrics-server-config-volume"}]}}}}
    creationTimestamp: 2018-04-06T15:00:09Z
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: metrics-server
      kubernetes.io/cluster-service: "true"
      version: v0.2.1
    name: metrics-server-v0.2.1
    namespace: kube-system
    resourceVersion: "611"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/metrics-server-v0.2.1
    uid: 330b1366-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        version: v0.2.1
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          version: v0.2.1
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:''
          image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 48m
              memory: 104Mi
            requests:
              cpu: 48m
              memory: 104Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=40Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.2.1
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: 2018-04-06T15:00:09Z
      lastUpdateTime: 2018-04-06T15:00:09Z
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      k8s-app: event-exporter
      pod-template-hash: "2667330906"
      version: v0.1.8
    name: event-exporter-v0.1.8-6bbc774f4b
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: event-exporter-v0.1.8
      uid: 3288c77a-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "520"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/event-exporter-v0.1.8-6bbc774f4b
    uid: 328a0ac5-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: event-exporter
        pod-template-hash: "2667330906"
        version: v0.1.8
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: event-exporter
          pod-template-hash: "2667330906"
          version: v0.1.8
      spec:
        containers:
        - command:
          - /event-exporter
          image: gcr.io/google-containers/event-exporter:v0.1.8
          imagePullPolicy: IfNotPresent
          name: event-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd-exporter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: event-exporter-sa
        serviceAccountName: event-exporter-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /etc/ssl/certs
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: 2018-04-06T15:00:48Z
    generation: 1
    labels:
      k8s-app: heapster
      pod-template-hash: "1643280380"
      version: v1.5.0
    name: heapster-v1.5.0-5b876d47d4
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: heapster-v1.5.0
      uid: 315911aa-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "616"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/heapster-v1.5.0-5b876d47d4
    uid: 4a270d48-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: heapster
        pod-template-hash: "1643280380"
        version: v1.5.0
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: heapster
          pod-template-hash: "1643280380"
          version: v1.5.0
      spec:
        containers:
        - command:
          - /heapster
          - --source=kubernetes.summary_api:''
          - --sink=stackdriver:?cluster_name=demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110
          image: gcr.io/google_containers/heapster-amd64:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: heapster
          resources:
            limits:
              cpu: 88m
              memory: 204Mi
            requests:
              cpu: 88m
              memory: 204Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prom-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=80m
          - --extra-cpu=0.5m
          - --memory=140Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=heapster-v1.5.0
          - --container=heapster
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: heapster-nanny
          resources:
            limits:
              cpu: 50m
              memory: 92960Ki
            requests:
              cpu: 50m
              memory: 92960Ki
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: heapster-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: heapster
        serviceAccountName: heapster
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: heapster-config
          name: heapster-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 2
    labels:
      k8s-app: heapster
      pod-template-hash: "3810610478"
      version: v1.5.0
    name: heapster-v1.5.0-7d54b548cd
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: heapster-v1.5.0
      uid: 315911aa-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "575"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/heapster-v1.5.0-7d54b548cd
    uid: 315a37fd-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: heapster
        pod-template-hash: "3810610478"
        version: v1.5.0
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: heapster
          pod-template-hash: "3810610478"
          version: v1.5.0
      spec:
        containers:
        - command:
          - /heapster
          - --source=kubernetes.summary_api:''
          - --sink=stackdriver:?cluster_name=demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110
          image: gcr.io/google_containers/heapster-amd64:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: heapster
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prom-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=80m
          - --extra-cpu=0.5m
          - --memory=140Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=heapster-v1.5.0
          - --container=heapster
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: heapster-nanny
          resources:
            limits:
              cpu: 50m
              memory: 92960Ki
            requests:
              cpu: 50m
              memory: 92960Ki
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: heapster-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: heapster
        serviceAccountName: heapster
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: heapster-config
          name: heapster-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:07Z
    generation: 2
    labels:
      k8s-app: kube-dns
      pod-template-hash: "1714400046"
    name: kube-dns-5c5884448b
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-dns
      uid: 3208a82c-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "598"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/kube-dns-5c5884448b
    uid: 320a3f96-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: "1714400046"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: "1714400046"
      spec:
        containers:
        - args:
          - --domain=cluster.local.
          - --dns-port=10053
          - --config-dir=/kube-dns-config
          - --v=2
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/kubedns
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kubedns
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube-dns-config
            name: kube-dns-config
        - args:
          - -v=2
          - -logtostderr
          - -configDir=/etc/k8s/dns/dnsmasq-nanny
          - -restartDnsmasq=true
          - --
          - -k
          - --cache-size=1000
          - --no-negcache
          - --log-facility=-
          - --server=/cluster.local/127.0.0.1#10053
          - --server=/in-addr.arpa/127.0.0.1#10053
          - --server=/ip6.arpa/127.0.0.1#10053
          image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck/dnsmasq
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: dnsmasq
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/k8s/dns/dnsmasq-nanny
            name: kube-dns-config
        - args:
          - --v=2
          - --logtostderr
          - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
          - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
          image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sidecar
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /monitor
          - --component=kubedns
          - --target-port=10054
          - --stackdriver-prefix=container.googleapis.com/internal/addons
          - --api-override=https://monitoring.googleapis.com/
          - --whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
          - --v=2
          image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
          imagePullPolicy: IfNotPresent
          name: prometheus-to-sd
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns
        serviceAccountName: kube-dns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-dns
            optional: true
          name: kube-dns-config
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:08Z
    generation: 1
    labels:
      k8s-app: kube-dns-autoscaler
      pod-template-hash: "2571768788"
    name: kube-dns-autoscaler-69c5cbdcdd
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-dns-autoscaler
      uid: 3243ea3a-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "533"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/kube-dns-autoscaler-69c5cbdcdd
    uid: 3244ef5a-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-dns-autoscaler
        pod-template-hash: "2571768788"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-dns-autoscaler
          pod-template-hash: "2571768788"
      spec:
        containers:
        - command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --target=Deployment/kube-dns
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
          - --logtostderr=true
          - --v=2
          image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2
          imagePullPolicy: IfNotPresent
          name: autoscaler
          resources:
            requests:
              cpu: 20m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-dns-autoscaler
        serviceAccountName: kube-dns-autoscaler
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: 2018-04-06T17:09:25Z
    generation: 1
    labels:
      k8s-app: kube-state-metrics
      pod-template-hash: "1297930811"
    name: kube-state-metrics-56fcf74d55
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-state-metrics
      uid: 3931c8f4-39bd-11e8-a5fb-42010a8001b0
    resourceVersion: "11225"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/kube-state-metrics-56fcf74d55
    uid: 4234b023-39bd-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-state-metrics
        pod-template-hash: "1297930811"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-state-metrics
          pod-template-hash: "1297930811"
      spec:
        containers:
        - image: quay.io/coreos/kube-state-metrics:v1.3.0
          imagePullPolicy: IfNotPresent
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http-metrics
            protocol: TCP
          - containerPort: 8081
            name: telemetry
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 103m
              memory: 106Mi
            requests:
              cpu: 103m
              memory: 106Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --container=kube-state-metrics
          - --cpu=100m
          - --extra-cpu=1m
          - --memory=100Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=kube-state-metrics
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: k8s.gcr.io/addon-resizer:1.7
          imagePullPolicy: IfNotPresent
          name: addon-resizer
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 30Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-state-metrics
        serviceAccountName: kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T17:09:10Z
    generation: 2
    labels:
      k8s-app: kube-state-metrics
      pod-template-hash: "4288412893"
    name: kube-state-metrics-86dd856df7
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kube-state-metrics
      uid: 3931c8f4-39bd-11e8-a5fb-42010a8001b0
    resourceVersion: "11232"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/kube-state-metrics-86dd856df7
    uid: 39333783-39bd-11e8-a5fb-42010a8001b0
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: kube-state-metrics
        pod-template-hash: "4288412893"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-state-metrics
          pod-template-hash: "4288412893"
      spec:
        containers:
        - image: quay.io/coreos/kube-state-metrics:v1.3.0
          imagePullPolicy: IfNotPresent
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http-metrics
            protocol: TCP
          - containerPort: 8081
            name: telemetry
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --container=kube-state-metrics
          - --cpu=100m
          - --extra-cpu=1m
          - --memory=100Mi
          - --extra-memory=2Mi
          - --threshold=5
          - --deployment=kube-state-metrics
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: k8s.gcr.io/addon-resizer:1.7
          imagePullPolicy: IfNotPresent
          name: addon-resizer
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 30Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-state-metrics
        serviceAccountName: kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: "3268529730"
    name: kubernetes-dashboard-76bd96fc74
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard
      uid: 318d2f67-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "605"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/kubernetes-dashboard-76bd96fc74
    uid: 318e5daa-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
        pod-template-hash: "3268529730"
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
          pod-template-hash: "3268529730"
      spec:
        containers:
        - args:
          - --system-banner=We <a href="https://goo.gl/yRsHKB">recommend that you
            disable</a> the Kubernetes Web UI. Use <a href="https://console.cloud.google.com/kubernetes/workload_/dashboard/us-central1-f/demo?project=wordpress-198401">Cloud
            Console</a> instead.
          - --system-banner-severity=WARNING
          - --auto-generate-certificates
          image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 50m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:06Z
    generation: 1
    labels:
      k8s-app: glbc
      name: glbc
      pod-template-hash: "1341271911"
    name: l7-default-backend-57856c5f55
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: l7-default-backend
      uid: 3106a4ef-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "513"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/l7-default-backend-57856c5f55
    uid: 310e65e3-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: glbc
        pod-template-hash: "1341271911"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: glbc
          name: glbc
          pod-template-hash: "1341271911"
      spec:
        containers:
        - image: gcr.io/google_containers/defaultbackend:1.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-http-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-07T12:37:26Z
    generation: 1
    labels:
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
      pod-template-hash: "1938617789"
    name: metricbeat-5f7db5ccdf
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metricbeat
      uid: 6dcbebb4-3a60-11e8-a5fb-42010a8001b0
    resourceVersion: "106709"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/metricbeat-5f7db5ccdf
    uid: 6dcd13ca-3a60-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
        pod-template-hash: "1938617789"
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metricbeat
          kubernetes.io/cluster-service: "true"
          pod-template-hash: "1938617789"
      spec:
        containers:
        - args:
          - -c
          - /etc/metricbeat.yml
          - -e
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/metricbeat:6.2.3
          imagePullPolicy: Always
          name: metricbeat
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/metricbeat.yml
            name: config
            readOnly: true
            subPath: metricbeat.yml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 384
            name: metricbeat-deployment-config
          name: config
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: 2018-04-06T15:00:09Z
    generation: 2
    labels:
      k8s-app: metrics-server
      pod-template-hash: "1096621673"
      version: v0.2.1
    name: metrics-server-v0.2.1-54fbb65bc7
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server-v0.2.1
      uid: 330b1366-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "562"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-v0.2.1-54fbb65bc7
    uid: 330bfda2-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: "1096621673"
        version: v0.2.1
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: "1096621673"
          version: v0.2.1
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:''
          image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=40Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.2.1
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: 2018-04-06T15:00:47Z
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: "3948854749"
      version: v0.2.1
    name: metrics-server-v0.2.1-7f8dd98c8f
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server-v0.2.1
      uid: 330b1366-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "609"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-v0.2.1-7f8dd98c8f
    uid: 49c6e157-39ab-11e8-a5fb-42010a8001b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: "3948854749"
        version: v0.2.1
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: "3948854749"
          version: v0.2.1
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:''
          image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 48m
              memory: 104Mi
            requests:
              cpu: 48m
              memory: 104Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /pod_nanny
          - --config-dir=/etc/config
          - --cpu=40m
          - --extra-cpu=0.5m
          - --memory=40Mi
          - --extra-memory=4Mi
          - --threshold=5
          - --deployment=metrics-server-v0.2.1
          - --container=metrics-server
          - --poll-period=300000
          - --estimator=exponential
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: gcr.io/google_containers/addon-resizer:1.8.1
          imagePullPolicy: IfNotPresent
          name: metrics-server-nanny
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: metrics-server-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: metrics-server-config
          name: metrics-server-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: 2018-04-07T12:37:26Z
    labels:
      controller-uid: 6de13209-3a60-11e8-a5fb-42010a8001b0
      job-name: metricbeat-setup
    name: metricbeat-setup
    namespace: kube-system
    resourceVersion: "106737"
    selfLink: /apis/batch/v1/namespaces/kube-system/jobs/metricbeat-setup
    uid: 6de13209-3a60-11e8-a5fb-42010a8001b0
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 6
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: 6de13209-3a60-11e8-a5fb-42010a8001b0
    template:
      metadata:
        creationTimestamp: null
        labels:
          controller-uid: 6de13209-3a60-11e8-a5fb-42010a8001b0
          job-name: metricbeat-setup
      spec:
        containers:
        - args:
          - -c
          - /etc/metricbeat.yml
          - -e
          - setup
          env:
          - name: CLOUD_ID
            valueFrom:
              secretKeyRef:
                key: CLOUD_ID
                name: dynamic-logging
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ELASTIC_PASSWORD
                name: dynamic-logging
          image: docker.elastic.co/beats/metricbeat:6.2.3
          imagePullPolicy: Always
          name: metricbeat-setup
          resources: {}
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/metricbeat.yml
            name: config
            readOnly: true
            subPath: metricbeat.yml
          - mountPath: /var/run/docker.sock
            name: dockersock
        dnsPolicy: ClusterFirst
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: dockersock
        - configMap:
            defaultMode: 384
            name: metricbeat-setup-config
          name: config
  status:
    completionTime: 2018-04-07T12:37:46Z
    conditions:
    - lastProbeTime: 2018-04-07T12:37:46Z
      lastTransitionTime: 2018-04-07T12:37:46Z
      status: "True"
      type: Complete
    startTime: 2018-04-07T12:37:26Z
    succeeded: 1
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-06T15:00:08Z
    generateName: event-exporter-v0.1.8-6bbc774f4b-
    labels:
      k8s-app: event-exporter
      pod-template-hash: "2667330906"
      version: v0.1.8
    name: event-exporter-v0.1.8-6bbc774f4b-wkzsb
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: event-exporter-v0.1.8-6bbc774f4b
      uid: 328a0ac5-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "519"
    selfLink: /api/v1/namespaces/kube-system/pods/event-exporter-v0.1.8-6bbc774f4b-wkzsb
    uid: 328b80fe-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - command:
      - /event-exporter
      image: gcr.io/google-containers/event-exporter:v0.1.8
      imagePullPolicy: IfNotPresent
      name: event-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: event-exporter-sa-token-pw92x
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=event_exporter:http://localhost:80?whitelisted=stackdriver_sink_received_entry_count,stackdriver_sink_request_count,stackdriver_sink_successfully_sent_entry_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: event-exporter-sa-token-pw92x
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: event-exporter-sa
    serviceAccountName: event-exporter-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: ssl-certs
    - name: event-exporter-sa-token-pw92x
      secret:
        defaultMode: 420
        secretName: event-exporter-sa-token-pw92x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:39Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:44Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:39Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bad0d3f416ae190921c70a0f4dc6a122c4f8f521f5d48e191c86dd5c41d6d766
      image: asia.gcr.io/google-containers/event-exporter:v0.1.8
      imageID: docker-pullable://asia.gcr.io/google-containers/event-exporter@sha256:056e112cbd8e65ca480f85e996e081fdccc808a556846f6d1295c68d46fabcc6
      lastState: {}
      name: event-exporter
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:42Z
    - containerID: docker://997af1439ee09b0defde7d51dc6cb021f443a8007a08153c654a91122baf3a28
      image: asia.gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imageID: docker-pullable://asia.gcr.io/google-containers/prometheus-to-sd@sha256:5831390762c790b0375c202579fd41dd5f40c71950f7538adbe14b0c16f35d56
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:43Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.48.2.3
    qosClass: BestEffort
    startTime: 2018-04-06T15:00:39Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T12:29:24Z
    generateName: filebeat-dynamic-
    labels:
      controller-revision-hash: "2012091907"
      k8s-app: filebeat-dynamic
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: filebeat-dynamic-cmtj9
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: filebeat-dynamic
      uid: 4e207a1d-3a5f-11e8-a5fb-42010a8001b0
    resourceVersion: "105971"
    selfLink: /api/v1/namespaces/kube-system/pods/filebeat-dynamic-cmtj9
    uid: 4e42a988-3a5f-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/filebeat.yml
      - -e
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/filebeat:6.2.3
      imagePullPolicy: Always
      name: filebeat-dynamic
      resources: {}
      securityContext:
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/filebeat.yml
        name: config
        readOnly: true
        subPath: filebeat.yml
      - mountPath: /usr/share/filebeat/data
        name: data
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /var/run/docker.sock
        name: dockersock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: filebeat-dynamic-token-bkv2j
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: filebeat-dynamic
    serviceAccountName: filebeat-dynamic
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 384
        name: filebeat-dynamic-config
      name: config
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: dockersock
    - emptyDir: {}
      name: data
    - name: filebeat-dynamic-token-bkv2j
      secret:
        defaultMode: 420
        secretName: filebeat-dynamic-token-bkv2j
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:24Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:26Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:26Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4431d66003fabd08846e1050d84c6f60f6d0c41c3a232e2dcaa1c4f463d1776d
      image: docker.elastic.co/beats/filebeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/filebeat@sha256:5b0ce2615c9f43a70440d4e4b7bc628b8b8929001444156da85c01cea94ea471
      lastState: {}
      name: filebeat-dynamic
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T12:29:25Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.48.2.17
    qosClass: BestEffort
    startTime: 2018-04-07T12:29:24Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T12:29:24Z
    generateName: filebeat-dynamic-
    labels:
      controller-revision-hash: "2012091907"
      k8s-app: filebeat-dynamic
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: filebeat-dynamic-p94zh
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: filebeat-dynamic
      uid: 4e207a1d-3a5f-11e8-a5fb-42010a8001b0
    resourceVersion: "105973"
    selfLink: /api/v1/namespaces/kube-system/pods/filebeat-dynamic-p94zh
    uid: 4e42516d-3a5f-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/filebeat.yml
      - -e
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/filebeat:6.2.3
      imagePullPolicy: Always
      name: filebeat-dynamic
      resources: {}
      securityContext:
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/filebeat.yml
        name: config
        readOnly: true
        subPath: filebeat.yml
      - mountPath: /usr/share/filebeat/data
        name: data
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /var/run/docker.sock
        name: dockersock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: filebeat-dynamic-token-bkv2j
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-n7bv
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: filebeat-dynamic
    serviceAccountName: filebeat-dynamic
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 384
        name: filebeat-dynamic-config
      name: config
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: dockersock
    - emptyDir: {}
      name: data
    - name: filebeat-dynamic-token-bkv2j
      secret:
        defaultMode: 420
        secretName: filebeat-dynamic-token-bkv2j
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:24Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:27Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:27Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://7eccd595cec8b7098d78ea9d9d0ff71f54068df55b401626bc5ad601eada2118
      image: docker.elastic.co/beats/filebeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/filebeat@sha256:5b0ce2615c9f43a70440d4e4b7bc628b8b8929001444156da85c01cea94ea471
      lastState: {}
      name: filebeat-dynamic
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T12:29:26Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.48.0.14
    qosClass: BestEffort
    startTime: 2018-04-07T12:29:24Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T12:29:24Z
    generateName: filebeat-dynamic-
    labels:
      controller-revision-hash: "2012091907"
      k8s-app: filebeat-dynamic
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: filebeat-dynamic-qltnv
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: filebeat-dynamic
      uid: 4e207a1d-3a5f-11e8-a5fb-42010a8001b0
    resourceVersion: "105972"
    selfLink: /api/v1/namespaces/kube-system/pods/filebeat-dynamic-qltnv
    uid: 4e40f80f-3a5f-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/filebeat.yml
      - -e
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/filebeat:6.2.3
      imagePullPolicy: Always
      name: filebeat-dynamic
      resources: {}
      securityContext:
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/filebeat.yml
        name: config
        readOnly: true
        subPath: filebeat.yml
      - mountPath: /usr/share/filebeat/data
        name: data
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /var/run/docker.sock
        name: dockersock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: filebeat-dynamic-token-bkv2j
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3p36
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: filebeat-dynamic
    serviceAccountName: filebeat-dynamic
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 384
        name: filebeat-dynamic-config
      name: config
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: dockersock
    - emptyDir: {}
      name: data
    - name: filebeat-dynamic-token-bkv2j
      secret:
        defaultMode: 420
        secretName: filebeat-dynamic-token-bkv2j
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:24Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:26Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:29:26Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://96d8f666e84fb302411bfdfc5a350f73f656e1c3e71517513f8ebfd60acef020
      image: docker.elastic.co/beats/filebeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/filebeat@sha256:5b0ce2615c9f43a70440d4e4b7bc628b8b8929001444156da85c01cea94ea471
      lastState: {}
      name: filebeat-dynamic
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T12:29:26Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.48.1.29
    qosClass: BestEffort
    startTime: 2018-04-07T12:29:24Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:11Z
    generateName: fluentd-gcp-v2.0.10-
    labels:
      controller-revision-hash: "1108666223"
      k8s-app: fluentd-gcp
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
      version: v2.0.10
    name: fluentd-gcp-v2.0.10-9lqt6
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluentd-gcp-v2.0.10
      uid: 32c2dff8-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "471"
    selfLink: /api/v1/namespaces/kube-system/pods/fluentd-gcp-v2.0.10-9lqt6
    uid: 34a00874-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - env:
      - name: FLUENTD_ARGS
        value: --no-supervisor -q
      image: gcr.io/google-containers/fluentd-gcp:2.0.10
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - |
            LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then
              exit 1;
            fi; LAST_MODIFIED_DATE=`stat /var/log/fluentd-buffers | grep Modify | sed -r "s/Modify: (.*)/\1/"`; LAST_MODIFIED_TIMESTAMP=`date -d "$LAST_MODIFIED_DATE" +%s`; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $STUCK_THRESHOLD_SECONDS` ]; then
              rm -rf /var/log/fluentd-buffers;
              exit 1;
            fi; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $LIVENESS_THRESHOLD_SECONDS` ]; then
              exit 1;
            fi;
        failureThreshold: 3
        initialDelaySeconds: 600
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
      name: fluentd-gcp
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 100m
          memory: 200Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /host/lib
        name: libsystemddir
        readOnly: true
      - mountPath: /etc/fluent/config.d
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gcp-token-x8np7
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=fluentd:http://localhost:31337?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gcp-token-x8np7
        readOnly: true
    dnsPolicy: Default
    nodeName: gke-demo-default-pool-5e984714-n7bv
    nodeSelector:
      beta.kubernetes.io/fluentd-ds-ready: "true"
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluentd-gcp
    serviceAccountName: fluentd-gcp
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.alpha.kubernetes.io/ismaster
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /usr/lib64
        type: ""
      name: libsystemddir
    - configMap:
        defaultMode: 420
        name: fluentd-gcp-config-v1.2.3
      name: config-volume
    - name: fluentd-gcp-token-x8np7
      secret:
        defaultMode: 420
        secretName: fluentd-gcp-token-x8np7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:14Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:31Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:28Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://15d393a4368cad545fd1138a7a288a2eb53454be78713527e04682dee0a37313
      image: asia.gcr.io/google-containers/fluentd-gcp:2.0.10
      imageID: docker-pullable://asia.gcr.io/google-containers/fluentd-gcp@sha256:a81a2c0137aee9f8a3e870898773976df9b63b27809bed2a4b9297531fb3c3c9
      lastState: {}
      name: fluentd-gcp
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:30Z
    - containerID: docker://7382bf69e4584e0a4589d2a460f84b5c8faf545749b1040c4ad032b401672617
      image: asia.gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imageID: docker-pullable://asia.gcr.io/google-containers/prometheus-to-sd@sha256:5831390762c790b0375c202579fd41dd5f40c71950f7538adbe14b0c16f35d56
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:31Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.48.0.2
    qosClass: Burstable
    startTime: 2018-04-06T15:00:14Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:12Z
    generateName: fluentd-gcp-v2.0.10-
    labels:
      controller-revision-hash: "1108666223"
      k8s-app: fluentd-gcp
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
      version: v2.0.10
    name: fluentd-gcp-v2.0.10-h5fqr
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluentd-gcp-v2.0.10
      uid: 32c2dff8-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "465"
    selfLink: /api/v1/namespaces/kube-system/pods/fluentd-gcp-v2.0.10-h5fqr
    uid: 34ac6261-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - env:
      - name: FLUENTD_ARGS
        value: --no-supervisor -q
      image: gcr.io/google-containers/fluentd-gcp:2.0.10
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - |
            LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then
              exit 1;
            fi; LAST_MODIFIED_DATE=`stat /var/log/fluentd-buffers | grep Modify | sed -r "s/Modify: (.*)/\1/"`; LAST_MODIFIED_TIMESTAMP=`date -d "$LAST_MODIFIED_DATE" +%s`; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $STUCK_THRESHOLD_SECONDS` ]; then
              rm -rf /var/log/fluentd-buffers;
              exit 1;
            fi; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $LIVENESS_THRESHOLD_SECONDS` ]; then
              exit 1;
            fi;
        failureThreshold: 3
        initialDelaySeconds: 600
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
      name: fluentd-gcp
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 100m
          memory: 200Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /host/lib
        name: libsystemddir
        readOnly: true
      - mountPath: /etc/fluent/config.d
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gcp-token-x8np7
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=fluentd:http://localhost:31337?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gcp-token-x8np7
        readOnly: true
    dnsPolicy: Default
    nodeName: gke-demo-default-pool-5e984714-3p36
    nodeSelector:
      beta.kubernetes.io/fluentd-ds-ready: "true"
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluentd-gcp
    serviceAccountName: fluentd-gcp
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.alpha.kubernetes.io/ismaster
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /usr/lib64
        type: ""
      name: libsystemddir
    - configMap:
        defaultMode: 420
        name: fluentd-gcp-config-v1.2.3
      name: config-volume
    - name: fluentd-gcp-token-x8np7
      secret:
        defaultMode: 420
        secretName: fluentd-gcp-token-x8np7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:14Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:28Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:25Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b25f83e574d0c61dd00c97ec48588132f36b4e61f97b27277e8f12d9c4e9b73e
      image: asia.gcr.io/google-containers/fluentd-gcp:2.0.10
      imageID: docker-pullable://asia.gcr.io/google-containers/fluentd-gcp@sha256:a81a2c0137aee9f8a3e870898773976df9b63b27809bed2a4b9297531fb3c3c9
      lastState: {}
      name: fluentd-gcp
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:27Z
    - containerID: docker://5a7d92797e8f9d625112d0d75f32556f2ed7f38154ac4935dd6ffe2b734afc52
      image: asia.gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imageID: docker-pullable://asia.gcr.io/google-containers/prometheus-to-sd@sha256:5831390762c790b0375c202579fd41dd5f40c71950f7538adbe14b0c16f35d56
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:28Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.48.1.2
    qosClass: Burstable
    startTime: 2018-04-06T15:00:14Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:13Z
    generateName: fluentd-gcp-v2.0.10-
    labels:
      controller-revision-hash: "1108666223"
      k8s-app: fluentd-gcp
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
      version: v2.0.10
    name: fluentd-gcp-v2.0.10-jkb8t
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluentd-gcp-v2.0.10
      uid: 32c2dff8-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "474"
    selfLink: /api/v1/namespaces/kube-system/pods/fluentd-gcp-v2.0.10-jkb8t
    uid: 358efefb-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - env:
      - name: FLUENTD_ARGS
        value: --no-supervisor -q
      image: gcr.io/google-containers/fluentd-gcp:2.0.10
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - |
            LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then
              exit 1;
            fi; LAST_MODIFIED_DATE=`stat /var/log/fluentd-buffers | grep Modify | sed -r "s/Modify: (.*)/\1/"`; LAST_MODIFIED_TIMESTAMP=`date -d "$LAST_MODIFIED_DATE" +%s`; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $STUCK_THRESHOLD_SECONDS` ]; then
              rm -rf /var/log/fluentd-buffers;
              exit 1;
            fi; if [ `date +%s` -gt `expr $LAST_MODIFIED_TIMESTAMP + $LIVENESS_THRESHOLD_SECONDS` ]; then
              exit 1;
            fi;
        failureThreshold: 3
        initialDelaySeconds: 600
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
      name: fluentd-gcp
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 100m
          memory: 200Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /host/lib
        name: libsystemddir
        readOnly: true
      - mountPath: /etc/fluent/config.d
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gcp-token-x8np7
        readOnly: true
    - command:
      - /monitor
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --source=fluentd:http://localhost:31337?whitelisted=stackdriver_successful_requests_count,stackdriver_failed_requests_count,stackdriver_ingested_entries_count,stackdriver_dropped_entries_count
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd-exporter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: fluentd-gcp-token-x8np7
        readOnly: true
    dnsPolicy: Default
    nodeName: gke-demo-default-pool-5e984714-3j16
    nodeSelector:
      beta.kubernetes.io/fluentd-ds-ready: "true"
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluentd-gcp
    serviceAccountName: fluentd-gcp
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.alpha.kubernetes.io/ismaster
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /usr/lib64
        type: ""
      name: libsystemddir
    - configMap:
        defaultMode: 420
        name: fluentd-gcp-config-v1.2.3
      name: config-volume
    - name: fluentd-gcp-token-x8np7
      secret:
        defaultMode: 420
        secretName: fluentd-gcp-token-x8np7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:16Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:31Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:29Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://3785d7ad6be1916764737d8761524a3e75402d586b551f1433ea4357b32a3910
      image: asia.gcr.io/google-containers/fluentd-gcp:2.0.10
      imageID: docker-pullable://asia.gcr.io/google-containers/fluentd-gcp@sha256:a81a2c0137aee9f8a3e870898773976df9b63b27809bed2a4b9297531fb3c3c9
      lastState: {}
      name: fluentd-gcp
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:31Z
    - containerID: docker://94fbbdd05440d208189ec79b27a93f31fda746f16389050e7ae678b7f8302207
      image: asia.gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imageID: docker-pullable://asia.gcr.io/google-containers/prometheus-to-sd@sha256:5831390762c790b0375c202579fd41dd5f40c71950f7538adbe14b0c16f35d56
      lastState: {}
      name: prometheus-to-sd-exporter
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:31Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.48.2.2
    qosClass: Burstable
    startTime: 2018-04-06T15:00:16Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:48Z
    generateName: heapster-v1.5.0-5b876d47d4-
    labels:
      k8s-app: heapster
      pod-template-hash: "1643280380"
      version: v1.5.0
    name: heapster-v1.5.0-5b876d47d4-cr85t
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: heapster-v1.5.0-5b876d47d4
      uid: 4a270d48-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "615"
    selfLink: /api/v1/namespaces/kube-system/pods/heapster-v1.5.0-5b876d47d4-cr85t
    uid: 4a369d9c-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - command:
      - /heapster
      - --source=kubernetes.summary_api:''
      - --sink=stackdriver:?cluster_name=demo&use_old_resources=true&use_new_resources=false&min_interval_sec=100&batch_export_timeout_sec=110
      image: gcr.io/google_containers/heapster-amd64:v1.5.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8082
          scheme: HTTP
        initialDelaySeconds: 180
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: heapster
      resources:
        limits:
          cpu: 88m
          memory: 204Mi
        requests:
          cpu: 88m
          memory: 204Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: heapster-token-f5rft
        readOnly: true
    - command:
      - /monitor
      - --source=heapster:http://localhost:8082?whitelisted=stackdriver_requests_count,stackdriver_timeseries_count
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --pod-id=$(POD_NAME)
      - --namespace-id=$(POD_NAMESPACE)
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imagePullPolicy: IfNotPresent
      name: prom-to-sd
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: heapster-token-f5rft
        readOnly: true
    - command:
      - /pod_nanny
      - --config-dir=/etc/config
      - --cpu=80m
      - --extra-cpu=0.5m
      - --memory=140Mi
      - --extra-memory=4Mi
      - --threshold=5
      - --deployment=heapster-v1.5.0
      - --container=heapster
      - --poll-period=300000
      - --estimator=exponential
      env:
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gcr.io/google_containers/addon-resizer:1.8.1
      imagePullPolicy: IfNotPresent
      name: heapster-nanny
      resources:
        limits:
          cpu: 50m
          memory: 92960Ki
        requests:
          cpu: 50m
          memory: 92960Ki
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: heapster-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: heapster-token-f5rft
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-n7bv
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: heapster
    serviceAccountName: heapster
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: heapster-config
      name: heapster-config-volume
    - name: heapster-token-f5rft
      secret:
        defaultMode: 420
        secretName: heapster-token-f5rft
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:48Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:56Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:48Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://87a7f2e4e24231742e8039260926113c3d343fb689b8633b0e1d7a4af8f56f71
      image: asia.gcr.io/google_containers/heapster-amd64:v1.5.0
      imageID: docker-pullable://asia.gcr.io/google_containers/heapster-amd64@sha256:da3288b0fe2312c621c2a6d08f24ccc56183156ec70767987501287db4927b9d
      lastState: {}
      name: heapster
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:52Z
    - containerID: docker://4a978b14df07294511fc0d53342336018e4fca4f159be819dfa348f6cced1720
      image: asia.gcr.io/google_containers/addon-resizer:1.8.1
      imageID: docker-pullable://asia.gcr.io/google_containers/addon-resizer@sha256:507aa9845ecce1fdde4d61f530c802f4dc2974c700ce0db7730866e442db958d
      lastState: {}
      name: heapster-nanny
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:56Z
    - containerID: docker://5df9451b6e703b301d36355ce9503324edf36308c7c767126abb1d8b08fc4813
      image: asia.gcr.io/google-containers/prometheus-to-sd:v0.2.2
      imageID: docker-pullable://asia.gcr.io/google-containers/prometheus-to-sd@sha256:5831390762c790b0375c202579fd41dd5f40c71950f7538adbe14b0c16f35d56
      lastState: {}
      name: prom-to-sd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:52Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.48.0.5
    qosClass: Burstable
    startTime: 2018-04-06T15:00:48Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:07Z
    generateName: kube-dns-5c5884448b-
    labels:
      k8s-app: kube-dns
      pod-template-hash: "1714400046"
    name: kube-dns-5c5884448b-lzwdf
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kube-dns-5c5884448b
      uid: 320a3f96-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "582"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-5c5884448b-lzwdf
    uid: 320b5779-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - --domain=cluster.local.
      - --dns-port=10053
      - --config-dir=/kube-dns-config
      - --v=2
      env:
      - name: PROMETHEUS_PORT
        value: "10055"
      image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/kubedns
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: kubedns
      ports:
      - containerPort: 10053
        name: dns-local
        protocol: UDP
      - containerPort: 10053
        name: dns-tcp-local
        protocol: TCP
      - containerPort: 10055
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kube-dns-config
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    - args:
      - -v=2
      - -logtostderr
      - -configDir=/etc/k8s/dns/dnsmasq-nanny
      - -restartDnsmasq=true
      - --
      - -k
      - --cache-size=1000
      - --no-negcache
      - --log-facility=-
      - --server=/cluster.local/127.0.0.1#10053
      - --server=/in-addr.arpa/127.0.0.1#10053
      - --server=/ip6.arpa/127.0.0.1#10053
      image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/dnsmasq
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: dnsmasq
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      resources:
        requests:
          cpu: 150m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/k8s/dns/dnsmasq-nanny
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    - args:
      - --v=2
      - --logtostderr
      - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
      - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
      image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /metrics
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: sidecar
      ports:
      - containerPort: 10054
        name: metrics
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    - command:
      - /monitor
      - --component=kubedns
      - --target-port=10054
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
      - --v=2
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    dnsPolicy: Default
    nodeName: gke-demo-default-pool-5e984714-n7bv
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-dns
    serviceAccountName: kube-dns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-dns
        optional: true
      name: kube-dns-config
    - name: kube-dns-token-nnlkf
      secret:
        defaultMode: 420
        secretName: kube-dns-token-nnlkf
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:38Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:50Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:38Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://05a43ddbcc939f73c459e42ec51e086151590e3d6b9432308b728d8a5d761d4e
      image: asia.gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
      imageID: docker-pullable://asia.gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64@sha256:93c827f018cf3322f1ff2aa80324a0306048b0a69bc274e423071fb0d2d29d8b
      lastState: {}
      name: dnsmasq
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:42Z
    - containerID: docker://875032c40ee0ff2844a287a5a770a374773c3c3af05e8d1eb2c7d94405f2a756
      image: asia.gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
      imageID: docker-pullable://asia.gcr.io/google_containers/k8s-dns-kube-dns-amd64@sha256:6d8e0da4fb46e9ea2034a3f4cab0e095618a2ead78720c12e791342738e5f85d
      lastState: {}
      name: kubedns
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:41Z
    - containerID: docker://d9c25dc5e32e4f0ed85683967b121f0697fe74858893f04f120c696652bcd325
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
      imageID: docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:be220ec4a66275442f11d420033c106bb3502a3217a99c806eef3cf9858788a2
      lastState: {}
      name: prometheus-to-sd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:45Z
    - containerID: docker://c7bb8c565568f17bd1523e4e7a337810d431ca33698f0d79f44c43b1dc0cd645
      image: asia.gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
      imageID: docker-pullable://asia.gcr.io/google_containers/k8s-dns-sidecar-amd64@sha256:23df717980b4aa08d2da6c4cfa327f1b730d92ec9cf740959d2d5911830d82fb
      lastState: {}
      name: sidecar
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:43Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.48.0.4
    qosClass: Burstable
    startTime: 2018-04-06T15:00:38Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:47Z
    generateName: kube-dns-5c5884448b-
    labels:
      k8s-app: kube-dns
      pod-template-hash: "1714400046"
    name: kube-dns-5c5884448b-vrwrw
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kube-dns-5c5884448b
      uid: 320a3f96-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "597"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-5c5884448b-vrwrw
    uid: 49f4cfd0-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - --domain=cluster.local.
      - --dns-port=10053
      - --config-dir=/kube-dns-config
      - --v=2
      env:
      - name: PROMETHEUS_PORT
        value: "10055"
      image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/kubedns
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: kubedns
      ports:
      - containerPort: 10053
        name: dns-local
        protocol: UDP
      - containerPort: 10053
        name: dns-tcp-local
        protocol: TCP
      - containerPort: 10055
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kube-dns-config
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    - args:
      - -v=2
      - -logtostderr
      - -configDir=/etc/k8s/dns/dnsmasq-nanny
      - -restartDnsmasq=true
      - --
      - -k
      - --cache-size=1000
      - --no-negcache
      - --log-facility=-
      - --server=/cluster.local/127.0.0.1#10053
      - --server=/in-addr.arpa/127.0.0.1#10053
      - --server=/ip6.arpa/127.0.0.1#10053
      image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthcheck/dnsmasq
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: dnsmasq
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      resources:
        requests:
          cpu: 150m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/k8s/dns/dnsmasq-nanny
        name: kube-dns-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    - args:
      - --v=2
      - --logtostderr
      - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
      - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
      image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /metrics
          port: 10054
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: sidecar
      ports:
      - containerPort: 10054
        name: metrics
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    - command:
      - /monitor
      - --component=kubedns
      - --target-port=10054
      - --stackdriver-prefix=container.googleapis.com/internal/addons
      - --api-override=https://monitoring.googleapis.com/
      - --whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
      - --v=2
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
      imagePullPolicy: IfNotPresent
      name: prometheus-to-sd
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-token-nnlkf
        readOnly: true
    dnsPolicy: Default
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-dns
    serviceAccountName: kube-dns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-dns
        optional: true
      name: kube-dns-config
    - name: kube-dns-token-nnlkf
      secret:
        defaultMode: 420
        secretName: kube-dns-token-nnlkf
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:47Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:54Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:47Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ca628ea265467d606d8cfb960b4a0a017dff3751c9e8db2d19e8996a87d40977
      image: asia.gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8
      imageID: docker-pullable://asia.gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64@sha256:93c827f018cf3322f1ff2aa80324a0306048b0a69bc274e423071fb0d2d29d8b
      lastState: {}
      name: dnsmasq
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:50Z
    - containerID: docker://1de5d7fb9309993d681ea7337677185d710c4c7ff8d30534b392423ea041b329
      image: asia.gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8
      imageID: docker-pullable://asia.gcr.io/google_containers/k8s-dns-kube-dns-amd64@sha256:6d8e0da4fb46e9ea2034a3f4cab0e095618a2ead78720c12e791342738e5f85d
      lastState: {}
      name: kubedns
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:49Z
    - containerID: docker://85e6e75480084d7c6b54e9f89d2a1356ae4ce8d6e23ada642af16b23d85f435e
      image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
      imageID: docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:be220ec4a66275442f11d420033c106bb3502a3217a99c806eef3cf9858788a2
      lastState: {}
      name: prometheus-to-sd
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:53Z
    - containerID: docker://4745d839322c723ac882803b72229f228e80ae6236a2457fcaf7d56fc491b041
      image: asia.gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8
      imageID: docker-pullable://asia.gcr.io/google_containers/k8s-dns-sidecar-amd64@sha256:23df717980b4aa08d2da6c4cfa327f1b730d92ec9cf740959d2d5911830d82fb
      lastState: {}
      name: sidecar
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:51Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.48.2.6
    qosClass: Burstable
    startTime: 2018-04-06T15:00:47Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:13Z
    generateName: kube-dns-autoscaler-69c5cbdcdd-
    labels:
      k8s-app: kube-dns-autoscaler
      pod-template-hash: "2571768788"
    name: kube-dns-autoscaler-69c5cbdcdd-bl87t
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kube-dns-autoscaler-69c5cbdcdd
      uid: 3244ef5a-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "531"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-autoscaler-69c5cbdcdd-bl87t
    uid: 3560de99-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - command:
      - /cluster-proportional-autoscaler
      - --namespace=kube-system
      - --configmap=kube-dns-autoscaler
      - --target=Deployment/kube-dns
      - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
      - --logtostderr=true
      - --v=2
      image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2
      imagePullPolicy: IfNotPresent
      name: autoscaler
      resources:
        requests:
          cpu: 20m
          memory: 10Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-dns-autoscaler-token-lf87j
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-dns-autoscaler
    serviceAccountName: kube-dns-autoscaler
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-dns-autoscaler-token-lf87j
      secret:
        defaultMode: 420
        secretName: kube-dns-autoscaler-token-lf87j
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:44Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:46Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:44Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://166d6073fe20f6674800f88917033062059348e32cd0fe50119293f1e72beb0c
      image: asia.gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2
      imageID: docker-pullable://asia.gcr.io/google_containers/cluster-proportional-autoscaler-amd64@sha256:003f98d9f411ddfa6ff6d539196355e03ddd69fa4ed38c7ffb8fec6f729afe2d
      lastState: {}
      name: autoscaler
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:46Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.48.2.5
    qosClass: Burstable
    startTime: 2018-04-06T15:00:44Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: a30a925b5d1bec9d3f3f8ffb2757b878
      kubernetes.io/config.mirror: a30a925b5d1bec9d3f3f8ffb2757b878
      kubernetes.io/config.seen: 2018-04-06T15:00:13.292268858Z
      kubernetes.io/config.source: file
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:16Z
    labels:
      component: kube-proxy
      tier: node
    name: kube-proxy-gke-demo-default-pool-5e984714-3j16
    namespace: kube-system
    resourceVersion: "448"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-gke-demo-default-pool-5e984714-3j16
    uid: 3756ea6f-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - exec kube-proxy --master=https://35.194.33.50 --kubeconfig=/var/lib/kube-proxy/kubeconfig
        --cluster-cidr=10.48.0.0/14 --resource-container="" --oom-score-adj=-998 --v=2
        --feature-gates=ExperimentalCriticalPodAnnotation=true --iptables-sync-period=1m
        --iptables-min-sync-period=10s --ipvs-sync-period=1m --ipvs-min-sync-period=10s
        1>>/var/log/kube-proxy.log 2>&1
      image: gcr.io/google_containers/kube-proxy:v1.9.6-gke.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: etc-ssl-certs
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-ca-certs
        readOnly: true
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/kube-proxy/kubeconfig
        name: kubeconfig
      - mountPath: /run/xtables.lock
        name: iptableslock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    volumes:
    - hostPath:
        path: /usr/share/ca-certificates
        type: ""
      name: usr-ca-certs
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: etc-ssl-certs
    - hostPath:
        path: /var/lib/kube-proxy/kubeconfig
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: iptableslock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:16Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:17Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:16Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://754fe238eddf7925a872d1829f70835e62dc62626448b739fe8f09e9369fb909
      image: gcr.io/google_containers/kube-proxy:v1.9.6-gke.0
      imageID: docker://sha256:c7ce680737bd65a2829e9eceefd3a456edb8f7db8b200104b0ecc41b68b6b8a9
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:17Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.128.0.4
    qosClass: Burstable
    startTime: 2018-04-06T15:00:16Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: a30a925b5d1bec9d3f3f8ffb2757b878
      kubernetes.io/config.mirror: a30a925b5d1bec9d3f3f8ffb2757b878
      kubernetes.io/config.seen: 2018-04-06T15:00:11.735622008Z
      kubernetes.io/config.source: file
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:14Z
    labels:
      component: kube-proxy
      tier: node
    name: kube-proxy-gke-demo-default-pool-5e984714-3p36
    namespace: kube-system
    resourceVersion: "442"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-gke-demo-default-pool-5e984714-3p36
    uid: 366422cb-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - exec kube-proxy --master=https://35.194.33.50 --kubeconfig=/var/lib/kube-proxy/kubeconfig
        --cluster-cidr=10.48.0.0/14 --resource-container="" --oom-score-adj=-998 --v=2
        --feature-gates=ExperimentalCriticalPodAnnotation=true --iptables-sync-period=1m
        --iptables-min-sync-period=10s --ipvs-sync-period=1m --ipvs-min-sync-period=10s
        1>>/var/log/kube-proxy.log 2>&1
      image: gcr.io/google_containers/kube-proxy:v1.9.6-gke.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: etc-ssl-certs
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-ca-certs
        readOnly: true
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/kube-proxy/kubeconfig
        name: kubeconfig
      - mountPath: /run/xtables.lock
        name: iptableslock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-3p36
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    volumes:
    - hostPath:
        path: /usr/share/ca-certificates
        type: ""
      name: usr-ca-certs
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: etc-ssl-certs
    - hostPath:
        path: /var/lib/kube-proxy/kubeconfig
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: iptableslock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:14Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:16Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:14Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0e50c0ddc6483a5ed9c1771b237dc35a077522b4a1b1ba51d77d71a7cd72db4e
      image: gcr.io/google_containers/kube-proxy:v1.9.6-gke.0
      imageID: docker://sha256:c7ce680737bd65a2829e9eceefd3a456edb8f7db8b200104b0ecc41b68b6b8a9
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:15Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.128.0.2
    qosClass: Burstable
    startTime: 2018-04-06T15:00:14Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: a30a925b5d1bec9d3f3f8ffb2757b878
      kubernetes.io/config.mirror: a30a925b5d1bec9d3f3f8ffb2757b878
      kubernetes.io/config.seen: 2018-04-06T15:00:11.741987231Z
      kubernetes.io/config.source: file
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:14Z
    labels:
      component: kube-proxy
      tier: node
    name: kube-proxy-gke-demo-default-pool-5e984714-n7bv
    namespace: kube-system
    resourceVersion: "441"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-gke-demo-default-pool-5e984714-n7bv
    uid: 36670a7e-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - command:
      - /bin/sh
      - -c
      - exec kube-proxy --master=https://35.194.33.50 --kubeconfig=/var/lib/kube-proxy/kubeconfig
        --cluster-cidr=10.48.0.0/14 --resource-container="" --oom-score-adj=-998 --v=2
        --feature-gates=ExperimentalCriticalPodAnnotation=true --iptables-sync-period=1m
        --iptables-min-sync-period=10s --ipvs-sync-period=1m --ipvs-min-sync-period=10s
        1>>/var/log/kube-proxy.log 2>&1
      image: gcr.io/google_containers/kube-proxy:v1.9.6-gke.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: etc-ssl-certs
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-ca-certs
        readOnly: true
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/kube-proxy/kubeconfig
        name: kubeconfig
      - mountPath: /run/xtables.lock
        name: iptableslock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-n7bv
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    volumes:
    - hostPath:
        path: /usr/share/ca-certificates
        type: ""
      name: usr-ca-certs
    - hostPath:
        path: /etc/ssl/certs
        type: ""
      name: etc-ssl-certs
    - hostPath:
        path: /var/lib/kube-proxy/kubeconfig
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: iptableslock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:14Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:15Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:14Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f08b915b088f136146fd1962965a972405ebb733c522e94f2fef72fe2e0e497b
      image: gcr.io/google_containers/kube-proxy:v1.9.6-gke.0
      imageID: docker://sha256:c7ce680737bd65a2829e9eceefd3a456edb8f7db8b200104b0ecc41b68b6b8a9
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:15Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.128.0.3
    qosClass: Burstable
    startTime: 2018-04-06T15:00:14Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-06T17:09:25Z
    generateName: kube-state-metrics-56fcf74d55-
    labels:
      k8s-app: kube-state-metrics
      pod-template-hash: "1297930811"
    name: kube-state-metrics-56fcf74d55-6rg4f
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kube-state-metrics-56fcf74d55
      uid: 4234b023-39bd-11e8-a5fb-42010a8001b0
    resourceVersion: "11224"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-state-metrics-56fcf74d55-6rg4f
    uid: 42370453-39bd-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - image: quay.io/coreos/kube-state-metrics:v1.3.0
      imagePullPolicy: IfNotPresent
      name: kube-state-metrics
      ports:
      - containerPort: 8080
        name: http-metrics
        protocol: TCP
      - containerPort: 8081
        name: telemetry
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 103m
          memory: 106Mi
        requests:
          cpu: 103m
          memory: 106Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-state-metrics-token-dnjtd
        readOnly: true
    - command:
      - /pod_nanny
      - --container=kube-state-metrics
      - --cpu=100m
      - --extra-cpu=1m
      - --memory=100Mi
      - --extra-memory=2Mi
      - --threshold=5
      - --deployment=kube-state-metrics
      env:
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: k8s.gcr.io/addon-resizer:1.7
      imagePullPolicy: IfNotPresent
      name: addon-resizer
      resources:
        limits:
          cpu: 100m
          memory: 30Mi
        requests:
          cpu: 100m
          memory: 30Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-state-metrics-token-dnjtd
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-state-metrics
    serviceAccountName: kube-state-metrics
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-state-metrics-token-dnjtd
      secret:
        defaultMode: 420
        secretName: kube-state-metrics-token-dnjtd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T17:09:25Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T17:09:35Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T17:09:25Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ad7f808cbbd6ef06b4cef6f3efe9dc0a5c72f683877f701410dba431ca673b5c
      image: k8s.gcr.io/addon-resizer:1.7
      imageID: docker-pullable://k8s.gcr.io/addon-resizer@sha256:dcec9a5c2e20b8df19f3e9eeb87d9054a9e94e71479b935d5cfdbede9ce15895
      lastState: {}
      name: addon-resizer
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T17:09:34Z
    - containerID: docker://47818d6fa760fe32a463b5f87a7f942f10fd008acee0cf59546a07daf4f54d52
      image: quay.io/coreos/kube-state-metrics:v1.3.0
      imageID: docker-pullable://quay.io/coreos/kube-state-metrics@sha256:f053462579a86ff5b14941635b659089dae31e207472b72551d5f7339b143a54
      lastState: {}
      name: kube-state-metrics
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T17:09:30Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.48.2.7
    qosClass: Guaranteed
    startTime: 2018-04-06T17:09:25Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:12Z
    generateName: kubernetes-dashboard-76bd96fc74-
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: "3268529730"
    name: kubernetes-dashboard-76bd96fc74-2wz86
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-76bd96fc74
      uid: 318e5daa-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "604"
    selfLink: /api/v1/namespaces/kube-system/pods/kubernetes-dashboard-76bd96fc74-2wz86
    uid: 34aa04b1-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - --system-banner=We <a href="https://goo.gl/yRsHKB">recommend that you disable</a>
        the Kubernetes Web UI. Use <a href="https://console.cloud.google.com/kubernetes/workload_/dashboard/us-central1-f/demo?project=wordpress-198401">Cloud
        Console</a> instead.
      - --system-banner-severity=WARNING
      - --auto-generate-certificates
      image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8443
          scheme: HTTPS
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: kubernetes-dashboard
      ports:
      - containerPort: 8443
        protocol: TCP
      resources:
        limits:
          cpu: 100m
          memory: 300Mi
        requests:
          cpu: 50m
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /certs
        name: kubernetes-dashboard-certs
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kubernetes-dashboard-token-j5lzp
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3p36
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kubernetes-dashboard-certs
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-certs
    - emptyDir: {}
      name: tmp-volume
    - name: kubernetes-dashboard-token-j5lzp
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-token-j5lzp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:43Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:55Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:43Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://654d8e07ec96c92d314b67fef830fc29d97bb8e0746f503ab9467f8109af4d7f
      image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3
      imageID: docker-pullable://k8s.gcr.io/kubernetes-dashboard-amd64@sha256:dc4026c1b595435ef5527ca598e1e9c4343076926d7d62b365c44831395adbd0
      lastState: {}
      name: kubernetes-dashboard
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:49Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.48.1.4
    qosClass: Burstable
    startTime: 2018-04-06T15:00:43Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-06T15:00:06Z
    generateName: l7-default-backend-57856c5f55-
    labels:
      k8s-app: glbc
      name: glbc
      pod-template-hash: "1341271911"
    name: l7-default-backend-57856c5f55-szx8v
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: l7-default-backend-57856c5f55
      uid: 310e65e3-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "512"
    selfLink: /api/v1/namespaces/kube-system/pods/l7-default-backend-57856c5f55-szx8v
    uid: 311aba06-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - image: gcr.io/google_containers/defaultbackend:1.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: default-http-backend
      ports:
      - containerPort: 8080
        protocol: TCP
      resources:
        limits:
          cpu: 10m
          memory: 20Mi
        requests:
          cpu: 10m
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-c6cv2
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-n7bv
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-c6cv2
      secret:
        defaultMode: 420
        secretName: default-token-c6cv2
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:37Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:44Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:37Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b270cc98d3252665ae6ae33a29cd944f9cafccce2846ca1c8d6140f3dd00cd20
      image: asia.gcr.io/google_containers/defaultbackend:1.3
      imageID: docker-pullable://asia.gcr.io/google_containers/defaultbackend@sha256:fb91f9395ddf44df1ca3adf68b25dcbc269e5d08ba14a40de9abdedafacf93d4
      lastState: {}
      name: default-http-backend
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:42Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.48.0.3
    qosClass: Guaranteed
    startTime: 2018-04-06T15:00:37Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T12:37:27Z
    generateName: metricbeat-
    labels:
      controller-revision-hash: "3709035418"
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: metricbeat-4s2sf
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricbeat
      uid: 6dbe3f00-3a60-11e8-a5fb-42010a8001b0
    resourceVersion: "106712"
    selfLink: /api/v1/namespaces/kube-system/pods/metricbeat-4s2sf
    uid: 6e01fe74-3a60-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/metricbeat.yml
      - -e
      - -system.hostfs=/hostfs
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imagePullPolicy: Always
      name: metricbeat
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/metricbeat.yml
        name: config
        readOnly: true
        subPath: metricbeat.yml
      - mountPath: /var/run/docker.sock
        name: dockersock
      - mountPath: /hostfs/proc
        name: proc
        readOnly: true
      - mountPath: /hostfs/sys/fs/cgroup
        name: cgroup
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metricbeat-token-w5hjl
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metricbeat
    serviceAccountName: metricbeat
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys/fs/cgroup
        type: ""
      name: cgroup
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: dockersock
    - configMap:
        defaultMode: 384
        name: metricbeat-config
      name: config
    - emptyDir: {}
      name: data
    - name: metricbeat-token-w5hjl
      secret:
        defaultMode: 420
        secretName: metricbeat-token-w5hjl
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:27Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:28Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:28Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://71a640ec1036c15fbd4831eb95fea54b4db01851746a3932d422d5521bcc7b05
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/metricbeat@sha256:c9d9c39456757949cee20463acd03dd712eeb7fd4dc693fb5e44e1d002966937
      lastState: {}
      name: metricbeat
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T12:37:28Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.128.0.4
    qosClass: Burstable
    startTime: 2018-04-07T12:37:27Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T12:37:26Z
    generateName: metricbeat-5f7db5ccdf-
    labels:
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
      pod-template-hash: "1938617789"
    name: metricbeat-5f7db5ccdf-8jv76
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metricbeat-5f7db5ccdf
      uid: 6dcd13ca-3a60-11e8-a5fb-42010a8001b0
    resourceVersion: "106707"
    selfLink: /api/v1/namespaces/kube-system/pods/metricbeat-5f7db5ccdf-8jv76
    uid: 6dcfcfc9-3a60-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/metricbeat.yml
      - -e
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imagePullPolicy: Always
      name: metricbeat
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/metricbeat.yml
        name: config
        readOnly: true
        subPath: metricbeat.yml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-c6cv2
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3p36
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 384
        name: metricbeat-deployment-config
      name: config
    - name: default-token-c6cv2
      secret:
        defaultMode: 420
        secretName: default-token-c6cv2
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:26Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:29Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:26Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f0eb7267fbebba08503f96bacc81590ebeeb17f49c2bf802c2510612bb194a75
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/metricbeat@sha256:c9d9c39456757949cee20463acd03dd712eeb7fd4dc693fb5e44e1d002966937
      lastState: {}
      name: metricbeat
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T12:37:29Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.48.1.30
    qosClass: Burstable
    startTime: 2018-04-07T12:37:26Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T12:37:27Z
    generateName: metricbeat-
    labels:
      controller-revision-hash: "3709035418"
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: metricbeat-phpr4
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricbeat
      uid: 6dbe3f00-3a60-11e8-a5fb-42010a8001b0
    resourceVersion: "106713"
    selfLink: /api/v1/namespaces/kube-system/pods/metricbeat-phpr4
    uid: 6e00217d-3a60-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/metricbeat.yml
      - -e
      - -system.hostfs=/hostfs
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imagePullPolicy: Always
      name: metricbeat
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/metricbeat.yml
        name: config
        readOnly: true
        subPath: metricbeat.yml
      - mountPath: /var/run/docker.sock
        name: dockersock
      - mountPath: /hostfs/proc
        name: proc
        readOnly: true
      - mountPath: /hostfs/sys/fs/cgroup
        name: cgroup
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metricbeat-token-w5hjl
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-n7bv
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metricbeat
    serviceAccountName: metricbeat
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys/fs/cgroup
        type: ""
      name: cgroup
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: dockersock
    - configMap:
        defaultMode: 384
        name: metricbeat-config
      name: config
    - emptyDir: {}
      name: data
    - name: metricbeat-token-w5hjl
      secret:
        defaultMode: 420
        secretName: metricbeat-token-w5hjl
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:27Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:29Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:29Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b40b9f1d899eac56d88757911fe104670250c4eb3288c81ff4b408d78fede23e
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/metricbeat@sha256:c9d9c39456757949cee20463acd03dd712eeb7fd4dc693fb5e44e1d002966937
      lastState: {}
      name: metricbeat
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T12:37:28Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.128.0.3
    qosClass: Burstable
    startTime: 2018-04-07T12:37:27Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T12:37:27Z
    generateName: metricbeat-
    labels:
      controller-revision-hash: "3709035418"
      k8s-app: metricbeat
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: metricbeat-q985h
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: metricbeat
      uid: 6dbe3f00-3a60-11e8-a5fb-42010a8001b0
    resourceVersion: "106715"
    selfLink: /api/v1/namespaces/kube-system/pods/metricbeat-q985h
    uid: 6e02710c-3a60-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/metricbeat.yml
      - -e
      - -system.hostfs=/hostfs
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imagePullPolicy: Always
      name: metricbeat
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/metricbeat.yml
        name: config
        readOnly: true
        subPath: metricbeat.yml
      - mountPath: /var/run/docker.sock
        name: dockersock
      - mountPath: /hostfs/proc
        name: proc
        readOnly: true
      - mountPath: /hostfs/sys/fs/cgroup
        name: cgroup
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metricbeat-token-w5hjl
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-3p36
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metricbeat
    serviceAccountName: metricbeat
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys/fs/cgroup
        type: ""
      name: cgroup
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: dockersock
    - configMap:
        defaultMode: 384
        name: metricbeat-config
      name: config
    - emptyDir: {}
      name: data
    - name: metricbeat-token-w5hjl
      secret:
        defaultMode: 420
        secretName: metricbeat-token-w5hjl
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:27Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:29Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T12:37:29Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8bc3b0056041251116d53da7fa515b3c98c115ba2d6be17b80f3e5afcd9cd154
      image: docker.elastic.co/beats/metricbeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/metricbeat@sha256:c9d9c39456757949cee20463acd03dd712eeb7fd4dc693fb5e44e1d002966937
      lastState: {}
      name: metricbeat
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T12:37:28Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.128.0.2
    qosClass: Burstable
    startTime: 2018-04-07T12:37:27Z
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: 2018-04-06T15:00:47Z
    generateName: metrics-server-v0.2.1-7f8dd98c8f-
    labels:
      k8s-app: metrics-server
      pod-template-hash: "3948854749"
      version: v0.2.1
    name: metrics-server-v0.2.1-7f8dd98c8f-85sd7
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-v0.2.1-7f8dd98c8f
      uid: 49c6e157-39ab-11e8-a5fb-42010a8001b0
    resourceVersion: "608"
    selfLink: /api/v1/namespaces/kube-system/pods/metrics-server-v0.2.1-7f8dd98c8f-85sd7
    uid: 49e42982-39ab-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - command:
      - /metrics-server
      - --source=kubernetes.summary_api:''
      image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
      imagePullPolicy: IfNotPresent
      name: metrics-server
      ports:
      - containerPort: 443
        name: https
        protocol: TCP
      resources:
        limits:
          cpu: 48m
          memory: 104Mi
        requests:
          cpu: 48m
          memory: 104Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metrics-server-token-j6zdm
        readOnly: true
    - command:
      - /pod_nanny
      - --config-dir=/etc/config
      - --cpu=40m
      - --extra-cpu=0.5m
      - --memory=40Mi
      - --extra-memory=4Mi
      - --threshold=5
      - --deployment=metrics-server-v0.2.1
      - --container=metrics-server
      - --poll-period=300000
      - --estimator=exponential
      env:
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: gcr.io/google_containers/addon-resizer:1.8.1
      imagePullPolicy: IfNotPresent
      name: metrics-server-nanny
      resources:
        limits:
          cpu: 100m
          memory: 300Mi
        requests:
          cpu: 5m
          memory: 50Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: metrics-server-config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metrics-server-token-j6zdm
        readOnly: true
    dnsPolicy: ClusterFirst
    nodeName: gke-demo-default-pool-5e984714-3p36
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: metrics-server-config
      name: metrics-server-config-volume
    - name: metrics-server-token-j6zdm
      secret:
        defaultMode: 420
        secretName: metrics-server-token-j6zdm
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:47Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:55Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-06T15:00:47Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://04ae566d074f3a1adcf14c4b1c745a34bde957f1417e0510a8a31c212a431f0d
      image: asia.gcr.io/google_containers/metrics-server-amd64:v0.2.1
      imageID: docker-pullable://asia.gcr.io/google_containers/metrics-server-amd64@sha256:49a9f12f7067d11f42c803dbe61ed2c1299959ad85cb315b25ff7eef8e6b8892
      lastState: {}
      name: metrics-server
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:55Z
    - containerID: docker://4ac5fe6c5c0c5f687f2a120f5694a5364bc74bec9635ce07ecb1af590e46677f
      image: asia.gcr.io/google_containers/addon-resizer:1.8.1
      imageID: docker-pullable://asia.gcr.io/google_containers/addon-resizer@sha256:507aa9845ecce1fdde4d61f530c802f4dc2974c700ce0db7730866e442db958d
      lastState: {}
      name: metrics-server-nanny
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-06T15:00:55Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.48.1.5
    qosClass: Burstable
    startTime: 2018-04-06T15:00:47Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T14:08:19Z
    generateName: packetbeat-dynamic-
    labels:
      controller-revision-hash: "2963396430"
      k8s-app: packetbeat-dynamic
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: packetbeat-dynamic-4k5lm
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: packetbeat-dynamic
      uid: 1f9ab157-3a6d-11e8-a5fb-42010a8001b0
    resourceVersion: "114150"
    selfLink: /api/v1/namespaces/kube-system/pods/packetbeat-dynamic-4k5lm
    uid: 1fba9369-3a6d-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/packetbeat.yml
      - -e
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/packetbeat:6.2.3
      imagePullPolicy: Always
      name: packetbeat-dynamic
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/packetbeat.yml
        name: config
        readOnly: true
        subPath: packetbeat.yml
      - mountPath: /usr/share/packetbeat/data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: packetbeat-dynamic-token-xg87m
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-n7bv
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: packetbeat-dynamic
    serviceAccountName: packetbeat-dynamic
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 384
        name: packetbeat-dynamic-config
      name: config
    - emptyDir: {}
      name: data
    - name: packetbeat-dynamic-token-xg87m
      secret:
        defaultMode: 420
        secretName: packetbeat-dynamic-token-xg87m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:19Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:21Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:21Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://13f99ee4a5aa0d4a0e574c1d72cb1715f8c9751b2942cf2d04d8328c0ab93d20
      image: docker.elastic.co/beats/packetbeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/packetbeat@sha256:4b73efc09e9b8c4e44fe10c43a0d05855f47b725103df23d330718dfab08579d
      lastState: {}
      name: packetbeat-dynamic
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T14:08:20Z
    hostIP: 10.128.0.3
    phase: Running
    podIP: 10.128.0.3
    qosClass: BestEffort
    startTime: 2018-04-07T14:08:19Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T14:08:19Z
    generateName: packetbeat-dynamic-
    labels:
      controller-revision-hash: "2963396430"
      k8s-app: packetbeat-dynamic
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: packetbeat-dynamic-mwnfd
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: packetbeat-dynamic
      uid: 1f9ab157-3a6d-11e8-a5fb-42010a8001b0
    resourceVersion: "114149"
    selfLink: /api/v1/namespaces/kube-system/pods/packetbeat-dynamic-mwnfd
    uid: 1fbc1669-3a6d-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/packetbeat.yml
      - -e
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/packetbeat:6.2.3
      imagePullPolicy: Always
      name: packetbeat-dynamic
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/packetbeat.yml
        name: config
        readOnly: true
        subPath: packetbeat.yml
      - mountPath: /usr/share/packetbeat/data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: packetbeat-dynamic-token-xg87m
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-3p36
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: packetbeat-dynamic
    serviceAccountName: packetbeat-dynamic
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 384
        name: packetbeat-dynamic-config
      name: config
    - emptyDir: {}
      name: data
    - name: packetbeat-dynamic-token-xg87m
      secret:
        defaultMode: 420
        secretName: packetbeat-dynamic-token-xg87m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:19Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:21Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:21Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d424b1e0cf62897a8eb4e64d4505d177ddc5d782f5010f026407bdc47c7ea52b
      image: docker.elastic.co/beats/packetbeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/packetbeat@sha256:4b73efc09e9b8c4e44fe10c43a0d05855f47b725103df23d330718dfab08579d
      lastState: {}
      name: packetbeat-dynamic
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T14:08:20Z
    hostIP: 10.128.0.2
    phase: Running
    podIP: 10.128.0.2
    qosClass: BestEffort
    startTime: 2018-04-07T14:08:19Z
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: 2018-04-07T14:08:19Z
    generateName: packetbeat-dynamic-
    labels:
      controller-revision-hash: "2963396430"
      k8s-app: packetbeat-dynamic
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    name: packetbeat-dynamic-z5rts
    namespace: kube-system
    ownerReferences:
    - apiVersion: extensions/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: packetbeat-dynamic
      uid: 1f9ab157-3a6d-11e8-a5fb-42010a8001b0
    resourceVersion: "114152"
    selfLink: /api/v1/namespaces/kube-system/pods/packetbeat-dynamic-z5rts
    uid: 1fbbd961-3a6d-11e8-a5fb-42010a8001b0
  spec:
    containers:
    - args:
      - -c
      - /etc/packetbeat.yml
      - -e
      env:
      - name: CLOUD_ID
        valueFrom:
          secretKeyRef:
            key: CLOUD_ID
            name: dynamic-logging
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: ELASTIC_PASSWORD
            name: dynamic-logging
      image: docker.elastic.co/beats/packetbeat:6.2.3
      imagePullPolicy: Always
      name: packetbeat-dynamic
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/packetbeat.yml
        name: config
        readOnly: true
        subPath: packetbeat.yml
      - mountPath: /usr/share/packetbeat/data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: packetbeat-dynamic-token-xg87m
        readOnly: true
    dnsPolicy: ClusterFirst
    hostNetwork: true
    nodeName: gke-demo-default-pool-5e984714-3j16
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: packetbeat-dynamic
    serviceAccountName: packetbeat-dynamic
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 384
        name: packetbeat-dynamic-config
      name: config
    - emptyDir: {}
      name: data
    - name: packetbeat-dynamic-token-xg87m
      secret:
        defaultMode: 420
        secretName: packetbeat-dynamic-token-xg87m
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:19Z
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:21Z
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: 2018-04-07T14:08:21Z
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c6ee28a1c858f944ac8b6e2e84b40f7fbd9e16fad2b1014130fcc5dd7bb19528
      image: docker.elastic.co/beats/packetbeat:6.2.3
      imageID: docker-pullable://docker.elastic.co/beats/packetbeat@sha256:4b73efc09e9b8c4e44fe10c43a0d05855f47b725103df23d330718dfab08579d
      lastState: {}
      name: packetbeat-dynamic
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: 2018-04-07T14:08:20Z
    hostIP: 10.128.0.4
    phase: Running
    podIP: 10.128.0.4
    qosClass: BestEffort
    startTime: 2018-04-07T14:08:19Z
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"glbc","kubernetes.io/cluster-service":"true","kubernetes.io/name":"GLBCDefaultBackend"},"name":"default-http-backend","namespace":"kube-system"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":8080}],"selector":{"k8s-app":"glbc"},"type":"NodePort"}}
    creationTimestamp: 2018-04-06T15:00:06Z
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: glbc
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: GLBCDefaultBackend
    name: default-http-backend
    namespace: kube-system
    resourceVersion: "261"
    selfLink: /api/v1/namespaces/kube-system/services/default-http-backend
    uid: 3133e61f-39ab-11e8-a5fb-42010a8001b0
  spec:
    clusterIP: 10.51.247.60
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 31359
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      k8s-app: glbc
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","kubernetes.io/cluster-service":"true","kubernetes.io/name":"Heapster"},"name":"heapster","namespace":"kube-system"},"spec":{"ports":[{"port":80,"targetPort":8082}],"selector":{"k8s-app":"heapster"}}}
    creationTimestamp: 2018-04-06T15:00:06Z
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: Heapster
    name: heapster
    namespace: kube-system
    resourceVersion: "281"
    selfLink: /api/v1/namespaces/kube-system/services/heapster
    uid: 3178297b-39ab-11e8-a5fb-42010a8001b0
  spec:
    clusterIP: 10.51.255.70
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8082
    selector:
      k8s-app: heapster
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true","kubernetes.io/name":"KubeDNS"},"name":"kube-dns","namespace":"kube-system"},"spec":{"clusterIP":"10.51.240.10","ports":[{"name":"dns","port":53,"protocol":"UDP"},{"name":"dns-tcp","port":53,"protocol":"TCP"}],"selector":{"k8s-app":"kube-dns"}}}
    creationTimestamp: 2018-04-06T15:00:07Z
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: KubeDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "294"
    selfLink: /api/v1/namespaces/kube-system/services/kube-dns
    uid: 31d75290-39ab-11e8-a5fb-42010a8001b0
  spec:
    clusterIP: 10.51.240.10
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"prometheus.io/scrape":"true"},"labels":{"k8s-app":"kube-state-metrics"},"name":"kube-state-metrics","namespace":"kube-system"},"spec":{"ports":[{"name":"http-metrics","port":8080,"protocol":"TCP","targetPort":"http-metrics"},{"name":"telemetry","port":8081,"protocol":"TCP","targetPort":"telemetry"}],"selector":{"k8s-app":"kube-state-metrics"}}}
      prometheus.io/scrape: "true"
    creationTimestamp: 2018-04-06T17:09:16Z
    labels:
      k8s-app: kube-state-metrics
    name: kube-state-metrics
    namespace: kube-system
    resourceVersion: "11175"
    selfLink: /api/v1/namespaces/kube-system/services/kube-state-metrics
    uid: 3c8039b0-39bd-11e8-a5fb-42010a8001b0
  spec:
    clusterIP: 10.51.255.58
    ports:
    - name: http-metrics
      port: 8080
      protocol: TCP
      targetPort: http-metrics
    - name: telemetry
      port: 8081
      protocol: TCP
      targetPort: telemetry
    selector:
      k8s-app: kube-state-metrics
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kubernetes-dashboard","kubernetes.io/cluster-service":"true"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"ports":[{"port":443,"targetPort":8443}],"selector":{"k8s-app":"kubernetes-dashboard"}}}
    creationTimestamp: 2018-04-06T15:00:07Z
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kubernetes-dashboard
      kubernetes.io/cluster-service: "true"
    name: kubernetes-dashboard
    namespace: kube-system
    resourceVersion: "289"
    selfLink: /api/v1/namespaces/kube-system/services/kubernetes-dashboard
    uid: 31bda1e6-39ab-11e8-a5fb-42010a8001b0
  spec:
    clusterIP: 10.51.247.117
    ports:
    - port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      k8s-app: kubernetes-dashboard
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","kubernetes.io/cluster-service":"true","kubernetes.io/name":"Metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"ports":[{"port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"k8s-app":"metrics-server"}}}
    creationTimestamp: 2018-04-06T15:00:09Z
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: Metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "358"
    selfLink: /api/v1/namespaces/kube-system/services/metrics-server
    uid: 33288feb-39ab-11e8-a5fb-42010a8001b0
  spec:
    clusterIP: 10.51.252.58
    ports:
    - port: 443
      protocol: TCP
      targetPort: https
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
