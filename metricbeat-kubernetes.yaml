---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-config
  namespace: kube-system
  labels:
    k8s-app: metricbeat
    kubernetes.io/cluster-service: "true"
data:
  metricbeat.yml: |-
    metricbeat.modules:
      - module: system
        period: 10s
        metricsets:
          - cpu
          - load
          - memory
          - network
          - process
          - process_summary
        processes: ['.*']
        process.include_top_n:
          by_cpu: 5      # include top 5 processes by CPU
          by_memory: 5   # include top 5 processes by memory

      - module: system
        period: 1m
        metricsets:
          - filesystem
          - fsstat
        processors:
        - drop_event.when.regexp:
            system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'

      - module: docker
        metricsets:
          - container
          - cpu
          - diskio
          - healthcheck
          - info
          - memory
          - network
        hosts: ["unix:///var/run/docker.sock"]
        period: 10s

      - module: kubernetes
        period: 10s
        metricsets:
          - node
          - system
          - pod
          - container
          - volume
        hosts: ["localhost:10255"]

    metricbeat.autodiscover:
      providers:
        - type: kubernetes
          host: ${HOSTNAME}
          templates:
            - condition.equals:
                kubernetes.labels.app: wordpress
              config:
                - module: apache
                  metricsets: ["status"]
                  period: 10s

                  # Apache hosts
                  hosts: ["http://${data.host}:80"]
            - condition.contains:
                kubernetes.container.name: mysql
              config:
                - module: mysql
                  period: 10s
                  metricsets: ["status"]
                  hosts: ["tcp(${data.host}:3306)/"]
                  username: root
                  password: ${MYSQL_ROOT_PASSWORD}

            - condition.contains:
                kubernetes.container.name: nginx
              config:
                - module: nginx
                  period: 10s
                  metricsets: ["stubstatus"]
                  hosts: ["${data.host}:8080"]

    processors:
      - add_cloud_metadata:

    cloud.auth: elastic:${ELASTIC_PASSWORD}
    cloud.id: ${CLOUD_ID}
    
    output.elasticsearch:

---
# Deploy a Metricbeat instance per node for node metrics retrieval
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: metricbeat
  namespace: kube-system
  labels:
    k8s-app: metricbeat
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: metricbeat
      hostNetwork: true
      containers:
      - name: metricbeat
        image: docker.elastic.co/beats/metricbeat:6.2.3
        imagePullPolicy: Always
        args: [
          "-c", "/etc/metricbeat.yml",
          "-e",
          "-system.hostfs=/hostfs",
        ]
        env:
        - name: CLOUD_ID
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: CLOUD_ID
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: ELASTIC_PASSWORD
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: MYSQL_PASSWORD
        securityContext:
          runAsUser: 0
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/metricbeat.yml
          readOnly: true
          subPath: metricbeat.yml
        - name: dockersock
          mountPath: /var/run/docker.sock
        - name: proc
          mountPath: /hostfs/proc
          readOnly: true
        - name: cgroup
          mountPath: /hostfs/sys/fs/cgroup
          readOnly: true
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: config
        configMap:
          defaultMode: 0600
          name: metricbeat-config
      - name: data
        emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-deployment-config
  namespace: kube-system
  labels:
    k8s-app: metricbeat
    kubernetes.io/cluster-service: "true"
data:
  metricbeat.yml: |-
    metricbeat.modules:
      # This module requires `kube-state-metrics` up and running under `kube-system` namespace
      - module: kubernetes
        metricsets:
          - state_node
          - state_deployment
          - state_replicaset
          - state_pod
          - state_container
        period: 10s
        hosts: ["kube-state-metrics:8080"]

    processors:
      - add_cloud_metadata:

    cloud.auth: elastic:${ELASTIC_PASSWORD}
    cloud.id: ${CLOUD_ID}
    
    output.elasticsearch:
---
# Deploy singleton instance in the whole cluster for some unique data sources, like kube-state-metrics
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: metricbeat
  namespace: kube-system
  labels:
    k8s-app: metricbeat
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: metricbeat
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - name: metricbeat
        image: docker.elastic.co/beats/metricbeat:6.2.3
        imagePullPolicy: Always
        args: [
          "-c", "/etc/metricbeat.yml",
          "-e",
        ]
        env:
        - name: CLOUD_ID
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: CLOUD_ID
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: ELASTIC_PASSWORD
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: MYSQL_PASSWORD
        securityContext:
          runAsUser: 0
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/metricbeat.yml
          readOnly: true
          subPath: metricbeat.yml
      volumes:
      - name: config
        configMap:
          defaultMode: 0600
          name: metricbeat-deployment-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-setup-config
  namespace: kube-system
  labels:
    k8s-app: metricbeat
    kubernetes.io/cluster-service: "true"
data:
  metricbeat.yml: |-
    metricbeat.config.modules:
      path: ${path.config}/modules.d/*.yml
      reload.enabled: false

    setup.template.settings:
      index.number_of_shards: 1
      index.codec: best_compression

    cloud.auth: elastic:${ELASTIC_PASSWORD}
    cloud.id: ${CLOUD_ID}
    
    output.elasticsearch:

    setup.kibana:
---
# Run metricbeat setup
apiVersion: batch/v1
kind: Job
metadata:
  name: metricbeat-setup
  namespace: kube-system
spec:
  activeDeadlineSeconds: 300
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: metricbeat-setup
        imagePullPolicy: Always
        image: docker.elastic.co/beats/metricbeat:6.2.3
        args: [
          "-c", "/etc/metricbeat.yml",
          "-e",
          "setup",
        ]
        env:
        - name: CLOUD_ID
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: CLOUD_ID
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: ELASTIC_PASSWORD
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: MYSQL_PASSWORD
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: config
          mountPath: /etc/metricbeat.yml
          readOnly: true
          subPath: metricbeat.yml
        - name: dockersock
          mountPath: /var/run/docker.sock
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: config
        configMap:
          defaultMode: 0600
          name: metricbeat-setup-config
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: metricbeat
subjects:
- kind: ServiceAccount
  name: metricbeat
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: metricbeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: metricbeat
  labels:
    k8s-app: metricbeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - events
  - pods
  verbs:
  - get
  - watch
  - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metricbeat
  namespace: kube-system
  labels:
    k8s-app: metricbeat
---
